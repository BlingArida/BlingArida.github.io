<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo项目github备份---管理git仓库的子仓库]]></title>
    <url>%2F2019%2F10%2F10%2Fhexo%E9%A1%B9%E7%9B%AEgithub%E5%A4%87%E4%BB%BD%2F</url>
    <content type="text"><![CDATA[打算备份设置的时候，next由于本身是一个git项目，上传上去作为了模块，然后变成了灰色。。。嗯，原来问题是需要管理git仓库的子仓库git add 的时候显示是酱婶的12345678910git initgit remote add origin git@github.com:BlingArida/myBlog-git.gitgit add myBlog/git commit -m &quot;first commit&quot;#作为一个子模块上传，会变灰，删掉它，然后作为目录上传git rm --cached myBlog/themes/nextgit add myBlog/themes/next/git commit -m &quot;add commit&quot;git push origin master Footnotes: 在Github上备份Hexo博客 管理 Git 仓库内的子仓库]]></content>
  </entry>
  <entry>
    <title><![CDATA[github homepage + Hexo搭建个人博客]]></title>
    <url>%2F2019%2F10%2F10%2F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[假期真的是太闲了，鸽了好久的搭个人博客计划启动~~还是用最简单的github homepage+Hexo搭一个凑合用吧。。。细节我就不详细写了，照着这个步骤就差不多了Footnote【1】我是在自己的WSL上搭的，所以基本参考使用linux博主的过程就ok了此处记录一些bug以及解决方法：创建myname.github.io项目，配置ssh密钥，链接github 出现了报错，无法连接ip和端口 ping github.com拼不通尝试解决：打开C:\Windows\System32\drivers\etc\hosts，发现：确实没有github.com的解析 在文件末尾添加如下内容，并保存： 192.30.255.112 github.com git185.31.16.184 github.global.ssl.fastly.net 重启cmd窗口，继续ping一下github.com： /mnt/d/1A/WorkNote/ —&gt; ping github.comPING github.com (192.30.255.112) 56(84) bytes of data.64 bytes from github.com (192.30.255.112): icmp_seq=1 ttl=39 time=199 ms64 bytes from github.com (192.30.255.112): icmp_seq=2 ttl=39 time=202 ms64 bytes from github.com (192.30.255.112): icmp_seq=3 ttl=39 time=200 ms64 bytes from github.com (192.30.255.112): icmp_seq=4 ttl=39 time=199 ms^C— github.com ping statistics —4 packets transmitted, 4 received, 0% packet loss, time 3003msrtt min/avg/max/mdev = 199.580/200.422/202.086/1.084 ms 说明，本机已经能够正常解析github.com这个域名了。 ssh 连接不上githubem，回上海之后，迷一样的可以了。。。 配置设置编辑_config.yml文件 deploy: type:git repo:git@github.com:BlingArida/BlingArida.github.io.git branch:master 设置主题https://github.com/theme-next/hexo-theme-next 12git clone https://github.com/theme-next/hexo-theme-next themes/next然后去_config.yml 修改一下主题名字就好了 1hexo -d 报了一个错： Connection closed by 192.30.255.112 port 22fatal: Could not read from remote repository. Please make sure you have the correct access rightsand the repository exists.FATAL Something’s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html 嗯，所以我在_config.yml里把git换成https了，然后搞定了 站内搜索功能的实现首先，我们在终端进入blog的根目录下，执行以下命令，注意这两个都要安装： 强调一下，这里我们要实现的是全文搜索，之前看教程只装了下面那个，折腾半天搞不定站内全文搜索，只能检索标题mmp。。。 如果这个破搜索抽风的话，就去blog目录下删node_modules这个文件夹，重新执行这几步插件的安装 https://www.itfanr.cc/2017/11/24/resolve-hexo-blog-search-exception/ 123npm install hexo-deployer-git --savenpm install hexo-generator-search --savenpm install hexo-generator-searchdb --save 接着，我们进入站点配置文件_config.yml,在最后新增以下内容： #content 默认是true，即支持全文搜索 12345search: path: search.xml field: post format: html limit: 10000 最后，打开主题配置文件_config.yml,搜索local_search,其值改为true： 12# Local searchlocal_search: enable: true 为文章内容添加统计功能，文字总数+阅读时长这个功能在next主题中已经存在了，我们只需要打开开关就行，具体步骤分为下面三步： 终端进入blog根目录，执行下面代码： 1npm install hexo-symbols-count-time --save 进入站点配置文件，为blog配置统计功能，将以下代码复制到最后： 12345symbols_count_time: symbols: true time: true total_symbols: true total_time: true 进入主题配置文件，搜素symbols_count_time,然后把要显示的改为true.更深入的操作大家可以看github上的说明。PS：如果大家配置完成，然后检查无误后，打开页面依旧没有显示，shift+F5）. 添加版权信息编辑next/_config.yml 12345creative_commons: license: by-nc-sa sidebar: true post: true language: 设置favicon图标1、选择一个favicon制作网站完成制作，例如：比特虫 ，制作一个1616，一个3232的；2、两个不同尺寸大小的文件，重名为favicon-16x16-next.png和favicon-32x32-next.png；2、将重命名的两个图片文件放到博客目录下的themes/next/source/images中（覆盖原来的两个默认的） 图片设置hexo支持它的myBlog/source/images里的图片上传 在typora设置 设置好了之后，typora的开头会增加一行 1234---title: github homepage + Hexo搭建个人博客typora-root-url: ..--- 这样就可以愉快地直接本地和推到git上查看图片了 字体设置编辑next/_config.yml 12345678910111213141516171819202122232425262728293031323334353637383940font: # Use custom fonts families or not. # Depended options: `external` and `family`. enable: true # Uri of fonts host, e.g. //fonts.googleapis.com (Default). host: https://fonts.loli.net # Font options: # `external: true` will load this font family from `host` above. # `family: Times New Roman`. Without any quotes. # `size: x.x`. Use `em` as unit. Default: 1 (16px) # Global font settings used for all elements inside &lt;body&gt;. global: external: true family: &quot;Microsoft YaHei&quot; size: 0.8 # Font settings for site title (.site-title). title: external: true family: Monaco size: # Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;). headings: external: true family: Monaco size: # Font settings for posts (.post-body). posts: external: true family: &quot;Microsoft YaHei&quot; # Font settings for &lt;code&gt; and code blocks. codes: external: true family: Monaco 觉得字体略大 编辑myBlog\themes\next\source\css_variables\base.styl 1$font-size-base = 12px; 还想加进去的功能 增加评论功能 设置一个萌系（?）头像 发现基友的网站都能插入视频了，em下次再说 优化百度、谷歌搜索到博客，其实这个最重要。。。emmm，先鸽。。。 FootNotes【新手向】从零开始搭建一个酷炫免费的个人博客 https://hexo-guide.readthedocs.io/zh_CN/latest/theme.html 如何在Typora中插入本地图片和加入Readmore按钮 https://theme-next.org/docs/theme-settings/#Fonts-Customization https://io-oi.me/tech/hexo-next-optimization/# http://www.ehcoo.com/seo.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[Differential expression analysis(差异表达分析)]]></title>
    <url>%2F2019%2F10%2F09%2FDifferential%20expression%20analysis%2F</url>
    <content type="text"><![CDATA[一、背景RNA-Seq实验设计中的“重复”包括：技术重复和生物学重复，重复是为了检测组间和组内的变异，对于假设检验至关重要。 技术重复为了估计测量技术（RNA-Seq）的变异。 生物学重复是为了发现生物组内的变异。简单的说，两组的基因表达的变化只有比组内变异还大时才能认为时显著的。 RNA-Seq试验中，抽样得到的raw read counts服从泊松分布。并且同一样本在两次试验中的结果不同，这称为shot noise。这种变异在RNA-Seq技术重复间成为Possion noise。生物学上不同的样本间的差异服从负二项(negative binomial)分布,有时称gamma-Poisson分布。由于RNA-Seq count数据也表现出zero inflation(大量值为0)的特征，所以很难拟合到负二项分布，所以有文章认为要用Poisson-Tweedie family建模。 基本方法就是以生物学意义的方式计算基因表达量，然后通过统计学分析表达量寻找具有统计学显著性差异的基因，从而 选择合适的基因 衡量结果的可靠性 分析方法寻找差异表达基因有三种方式： 第一种是计算Fold change（倍数变化），十分简单粗暴的方法，计算方法如下： E = mean(group1) B=mean(group2) FC = (E-B) / min(E,B) 说人话就是，基因A和基因B的平均值之差与两者中较小的比值。选择2-3倍的基因作为结果（为什么是2-3倍，就是大家约定俗成）。 第二种就是统计检验，写文章的时候总需要给出一个p值告诉主编这个结果可信的（虽然p值也存在争论）。 复习一下：p值指的碰巧是拒绝零假设机会。P值越大假阳性越低，同时真实结果也可能会剔除。（注： 基因表达分析的零假设是： 基因在不同处理下的表达量相同。） 对于基因表达而言，研究目标是，对于同一个基因而言，他们之间的差异是处理不同造成，还是因为系统误差造成。 第三种：Fold Change + 统计检验。 在统计检验中你找到越多的差异表达基因，在p值矫正之后，你反而找不到差异表达基因。也就是说，如果在结果中存在大量滥竽充数的所谓的DE基因，那么在严格的p值矫正筛选后，反而会误删真实的DE基因。 因此在p值矫正之前，你先要手动剔除一部分明显就是假阳性的DE基因。这个步骤就需要用到前面的fold-change分析。 理论基础：线性模型， 设计矩阵和比较矩阵线性回归 一般是用于量化的预测变量来预测量化的响应变量。比如说体重与身高的关系建模。基因表达可以简单写成， y = a + b · *treament* + e 方差分析(Analysis of Variance, ANAOVA)名字听起来好像是检验方差，但其实是为了判断样本之间的差异是否真实存在，为此需要证明不同处理内的方差显著性大于不同处理间的方差。 最简单的单因素方差分析，每一个结果都可以看成 yij = ai + u + eij， 其中u是总体均值，ai是每一个处理的差异，eij是随机误差。 上述两个公式非常相似，因为线性模型和方差分析都是广义线性模型(generalizing linear models, GLM)在正态分布的预测变量的特殊形式。 目前认为read count之间的差异是符合负二项分布，也叫gamma-Possion分布。那么问题来了，如何用GLM或者LM分析两个处理件的差异呢？其实可以简单的用上图的拟合直线的斜率来解释，如果不同处理之间存在差异，那么这个拟合线的斜率必定不为零，也就是与X轴平行。但是这是一种便于理解的方式（虽然你也未必能理解），实际更加复杂，考虑因素更多。 注1 负二向分布有两个参数，均值(mean)和离散值（dispersion). 离散值描述方差偏离均值的程度。泊松分布可以认为是负二向分布的离散值为1，也就是均值等于方差（mean=variance）的情况。注2 这部分涉及大量的统计学知识，不懂就用维基百科一个个查清楚。 下面的设计矩阵（design matrix）就很好理解了， 其实就是用来告诉==不同的差异分析函数应该如何对待变量==。比如说我们要研究的==KD和control之间变化==，设计矩阵就是 样本 处理 sample1 control sample2 control sample3 KD sample4 KD 那么比较矩阵（contrast matrix)就是告诉==差异分析函数应该如何对哪个因素进行比较， 这里就是比较不同处理下表达量的变化==。 二、RNA-seq的标准化 From RNA-seq reads to differential expression, Oshlack et al. Genome Biology 2010 基因表达标准化Normalisation我们在比较不同样品不同基因的差异表达情况时，期望表达水平分布符合统计方法的基本假设，但由于测序深度和基因长度的不同，直接使用原始count分析会导致假阳性和假阴性过高，因此对原始数据进行标准化/均一化是十分必要的。 根据样本间和样本内重复可以把现有的诸多标准化方法大致分为两类，一类WSN(within-sample normalization)：RPKM和quartile四分位数法；另一类BSN(between-sample normalization)：TMM和upper quartile上四分位处理。 为了方便理解，假设目前你在一次测序中(即剔除批次效应)检测了一个物种的3个样本，A,B,C，这个物种有三个基因G1,G2,G3, 基因长度分别为100, 500, 1000. 通过前期数据预处理，你得到了尚未标准化的表达量矩阵，如下所示。 比较容易想到的标准化方法基因表达量矩阵 基因/样本 样本A 样本B 样本C G1(100) 300 400 500 G2(500) 700 750 800 G3(1000) 1000 1300 1800 先说三个简单的策略，也就是最容易想到的方法 Total Count, TC, 每个基因计数除以总比对数, 即文库大小, 然后乘以不同样本的总比对数的均值 Upper Quartile, UQ, 和TC方法相似, 即用上四分位数替代总比对数 Median, Med, 和TC方法相似, 用中位数代替总比对数 上面方法都相似，考虑到我的例子只有三个基因，所以只展示TC方法的结果. 可以发现，原本比其他组观测值低的A-G2，目前反而是最高（表格第二行）。 TC处理后 A B C G1 370 402.7 418.1 G2 863.3 744.1 543.5 G3 1233.3 1308.8 1505.1 CPM (counts per million)如果省去TC中的 “乘以不同样本的总比对数的均值” 这一步，那么差不多就是CPM (counts per million)的策略，也就是根据直接根据深度对每个样本单独进行标准化. 在edgeR和limma/voom里面都有出现过。 不同样品的测序量会有差异，最简单的标准化方式是计算counts per million (CPM)，即原始reads count除以总reads数乘以1,000,000。 这种计算方式的缺点是容易受到极高表达且在不同样品中存在差异表达的基因的影响；这些基因的打开或关闭会影响到细胞中总的分子数目，可能导致这些基因标准化之后就不存在表达差异了，而原本没有差异的基因标准化之后却有差异了。RPKM、FPKM和TPM是CPM按照基因或转录本长度归一化后的表达，也会受到这一影响。 其它的标准化方法为了解决这一问题，研究者提出了其它的标准化方法。 量化因子 (size factor, SF)是由DESeq提出的。其方法是首先计算每个基因在所有样品中表达的几何平均值。每个细胞的量化因子(size factor)是所有基因与其在所有样品中的表达值的几何平均值的比值的中位数。由于几何平均值的使用，只有在所有样品中表达都不为0的基因才能用来计算。这一方法又被称为 RLE (relative log expression)。 12345678calc_sf &lt;- function (expr_mat, spikes=NULL)&#123; geomeans &lt;- exp(rowMeans(log(expr_mat[-spikes,]))) SF &lt;- function(cnts)&#123; median((cnts/geomeans)[(is.finite(geomeans) &amp; geomeans &gt;0)]) &#125; norm_factor &lt;- apply(expr_mat[-spikes,],2,SF) return(t(t(expr_mat)/norm_factor))&#125; 上四分位数 (upperquartile, UQ)是样品中所有基因的表达除以处于上四分位数的基因的表达值。同时为了保证表达水平的相对稳定，计算得到的上四分位数值要除以所有样品中上四分位数值的中位数。 12345678calc_uq &lt;- function (expr_mat, spikes=NULL)&#123; UQ &lt;- function(x) &#123; quantile(x[x&gt;0],0.75) &#125; uq &lt;- unlist(apply(expr_mat[-spikes,],2,UQ)) norm_factor &lt;- uq/median(uq) return(t(t(expr_mat)/norm_factor))&#125; TMM是M-值的加权截尾均值。选定一个样品为参照，其它样品中基因的表达相对于参照样品中对应基因表达倍数的log2值定义为M-值。随后去除M-值中最高和最低的30%，剩下的M值计算加权平均值。每一个非参照样品的基因表达值都乘以计算出的TMM。这个方法假设大部分基因的表达是没有差异的。 Median of Ratio (DESeq2)该方法基于的假设是，即使处在不同条件下的不同个样本，大多数基因的表达是不存在差异的，实际存在差异的基因只占很小的部分那么我们只需要将这些稳定的部分找出来，作为标准化的内参，依据内参算出各个样本的标准化因子 （1）对每个基因计算几何平均数，得到一个假设的参考样本(pseudo-reference sample) gene sampleA sampleB pseudo-reference sample EF2A 1489 906 sqrt(1489 * 906) = 1161.5 ABCD1 22 13 sqrt(22 * 13) = 17.7 … … … … （2）对每个样本的每个基因对于参考样本计算Fold Change gene sampleA sampleB pseudo-reference sample ratio of sampleA/ref ratio of sampleB/ref EF2A 1489 906 1161.5 1489/1161.5 = 1.28 906/1161.5 = 0.78 ABCD1 22 13 16.9 22/16.9 = 1.30 13/16.9 = 0.77 MEFV 793 410 570.2 793/570.2 = 1.39 410/570.2 = 0.72 BAG1 76 42 56.5 76/56.5 = 1.35 42/56.5 = 0.74 MOV10 521 1196 883.7 521/883.7 = 0.590 1196/883.7 = 1.35 … … … … … … （3）获取每个样本中Fold Change的中位数，我们就得到了非DE基因代表的Fold Change，该基因就是我们选择的该样本的内参基因，它的Fold Change就是该样本的标准化因子 1normalization_factor_sampleA &lt;- median(c(1.28, 1.3, 1.39, 1.35, 0.59))normalization_factor_sampleB &lt;- median(c(0.78, 0.77, 0.72, 0.74, 1.35)) TMM (Trimmed Mean of M value, edgeR)该方法的思想与DESeq2的Median of Ratio相同，假设前提都是：大多数基因的表达是不存在差异的 它与DESeq2的不同之处在于对内参的选择上： DESeq2选择一个内参基因，它的Ratio/Fold-Change就是标准化因子 edgeR选择一组内参基因集合，它们对标准化因子的计算均有贡献：加权平均 TMM（trimmed mean of M value)方法出现在2010年，比TC、 UQ、Med, CPM方法高级一点，基本假设是绝大数的基因不是差异表达基因.计算方法有点复杂，简单的说就是移除一定百分比的数据后，计算平均值作为缩放因子，对样本进行标准化。这次我们用R/edgeR来算. 和之前不同，A组的G2基因标准化后还是最低，这就是trim所引起。 代表性软件edgeR，具体原理参见Footnotes[5] 123456789&gt; library(edgeR)&gt; expr &lt;- matrix(c(300,400,500,700,750,650,1000,1300,1800),nrow = 3,byrow = TRUE)&gt; f &lt;- calcNormFactors(expr, method = &quot;TMM&quot;)&gt; mt_norm &lt;- t(t(mt) /f )&gt; mt_norm [,1] [,2] [,3][1,] 303.0164 402.5300 491.9114[2,] 707.0382 754.7438 787.0583[3,] 1010.0545 1308.2226 1770.8811 小结*DESeq2/DESeq有自己专门的计算缩放因子(scaling factor)的策略，它的基本假设就是绝大部分的基因表达在处理前后不会有显著性差异，表达量应该相似，据此计算每个基因在所有样本中的几何平均值(geometri mean), 每个样本的各个基因和对应的几何平均数的比值(fold change)的中位数就是缩放因子(scaling factor). * 内参基因，House-keeping gene(s)。某一基因在样本中的表达肯定是一样的。(有限制，依赖基因的功能注释，数目少准确不高。) 通用方法：假设大多数基因是没有差异表达的。统计学方法找到标准化的因子。 DESeq2(estimateSizeFactors/sizeFactors)、edgeR（TMM,calcNormFactors）。差异表达分析鉴定软件。 输入文件是reads count矩阵。 上述方法都是对样本整体进行标准化，标准化的结果只能比较不同样本之间的同一个基因的表达水平。 如果要同时比较不同样本不同基因之间的表达量差异，就得考虑到每个基因的转录本长度未必相同，毕竟转录本越长，打算成片段后被观察到的概率会高一点。此处不做展开。 对于差异表达分析而言，标准化不但要考虑测序深度的问题，还要考虑到某些表达量超高或者极显著差异表达的基因导致count的分布出现偏倚, 推荐用TMM, DESeq方法进行标准化。 三、DESeq2 分析差异表达1. DESeq2差异分析基本流程 对于DESeq2需要输入的三个数据：表达矩阵、样品信息矩阵、差异比较矩阵 而对于DESeq2的差异分析步骤，总结起来就是三步： 构建一个dds(DESeqDataSet)的对象； 利用DESeq函数进行标准化处理； 用result函数来提取差异比较的结果。 2. 构建dds矩阵 构建dds矩阵的基本代码 1dds &lt;- DESeqDataSetFromMatrix(countData = cts, colData = coldata, design= ~ batch + condition) 其输入的三个文件： 表达矩阵：countData，就是通过之前的HTSeq-count生成的reads-count计算融合的矩阵。行为基因名，列为样品名，值为reads或fragment的整数。 样品信息矩阵：colData，它的类型是一个dataframe（数据框），第一列是样品名称，第二列是样品的处理情况（对照还是处理等）。可以从表达矩阵中导出或是自己单独建立。 差异比较矩阵：design，差异比较矩阵就是告诉差异分析函数哪些是对照，哪些是处理。 r代码12345678910111213141516171819202122232425262728293031raw_count &lt;- read.csv('D:/1A/RNAseq/analysis/clone_dist.csv')head(raw_count)count_data &lt;- raw_count[,2:4]head(count_data)row.names(count_data) &lt;- raw_count[,1]condition &lt;- factor(c("rep","condition","condition"))col_data &lt;- data.frame(row.names = colnames(count_data), condition)library('DESeq2')dds &lt;- DESeqDataSetFromMatrix(countData = count_data,colData = col_data,design = ~ condition)nrow(dds)dds_filter &lt;- dds[ rowSums(counts(dds))&gt;1, ]dds_out &lt;- DESeq(dds_filter)res &lt;- results(dds_out)summary(res)table(res$padj&lt;0.05)res_deseq &lt;- res[order(res$padj),]#一般选取Foldchange值和经过FDR矫正过后的p值，取padj值(p值经过多重校验校正后的值)小于0.05，log2FoldChange大于1的基因作为差异基因集diff_gene_deseq2 &lt;- subset(res_deseq, padj&lt;0.05 &amp; (log2FoldChange &gt; 1 | log2FoldChange &lt; -1))res_diff_data &lt;- merge(as.data.frame(res),as.data.frame(counts(dds_out,normalize=TRUE)),by="row.names",sort=FALSE)write.csv(res_diff_data,file = "alpaca_data_new.csv",row.names = F)rld &lt;- rlog(dds, blind = FALSE)plotPCA(rld,intgroup=c("condition"))library("genefilter")library("pheatmap")topVarGene &lt;- head(order(rowVars(assay(rld)),decreasing = TRUE),50)mat &lt;- assay(rld)[ topVarGene, ]pheatmap(mat, annotation_col=col_data)pheatmap(mat,cluster_row=T,scale="row", annotation_col=col_data) res0.5 &lt;- results(dds, contrast = c("condition","Basal","LP"),alpha=0.05)#另一种绘图方式mat &lt;- mat - rowMeans(mat)pheatmap(mat, annotation_col=col_data) Footnotes https://www.plob.org/article/11574.html https://mp.weixin.qq.com/s?__biz=MzI1MjU5MjMzNA==&amp;mid=2247484514&amp;idx=1&amp;sn=1c6d227c6d7ac432d8baffb93b0b9072&amp;chksm=e9e02dc3de97a4d59d918ee37655153fa4ccc8122e3259c0201ff441c922548f22f84311ad91&amp;scene=21#wechat_redirect RNA-seq的标准化方法罗列 当我们在说RNA-seq reads count标准化时，其实在说什么？ RNA-seq中的那些统计学问题 DESeq2差异基因分析和批次效应移除-生信宝典.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[python云服务器配置]]></title>
    <url>%2F2019%2F10%2F09%2Fpython%20%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[VScode Remote今天抱着不想上班的心情迎来了高温假后的第一个工作日，吭哧吭哧本地装好了python2 发现没有我需要的包，我还只能在服务器上用那个只有linux和OS的软件。。。折腾了一波 vscode的remote-ssh，妈蛋服务器端下载又不行挂上了wget的代理12345$cat ~/.wgetrcuse_proxy=on#check-certificate=offhttp_proxy=http://127.0.0.1:9293https_proxy=http://127.0.0.1:9293 之后，是能下载了，但是centos6的基本库又有问题，我来更新它的权限不是很够，还有gcc的版本要调，由于工程太过浩大，鸽。。。 emmm centos6安装了依赖包之后，蜜汁可以了，非常佛 12345678910111213wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-2.17-55.el6.x86_64.rpmwget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-common-2.17-55.el6.x86_64.rpmwget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-devel-2.17-55.el6.x86_64.rpmwget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-headers-2.17-55.el6.x86_64.rpmwget https://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-utils-2.17-55.el6.x86_64.rpmwget https://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-static-2.17-55.el6.x86_64.rpmwget https://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/gcc-4.8.2-16.3.fc20/libstdc++-4.8.2-16.3.el6.x86_64.rpmwget https://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/gcc-4.8.2-16.3.fc20/libstdc++-devel-4.8.2-16.3.el6.x86_64.rpmwget https://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/gcc-4.8.2-16.3.fc20/libstdc++-static-4.8.2-16.3.el6.x86_64.rpmsudo rpm -Uh --force --nodeps glibc-2.17-55.el6.x86_64.rpm glibc-common-2.17-55.el6.x86_64.rpm glibc-devel-2.17-55.el6.x86_64.rpm glibc-headers-2.17-55.el6.x86_64.rpm glibc-static-2.17-55.el6.x86_64.rpm glibc-utils-2.17-55.el6.x86_64.rpmsudo rpm -Uh libstdc++-4.8.2-16.3.el6.x86_64.rpm libstdc++-devel-4.8.2-16.3.el6.x86_64.rpm libstdc++-static-4.8.2-16.3.el6.x86_64.rpm 然后就可以体验vscode的远程界面了 在服务器上也安装好相关需要的插件vscode remote非常迷，达到了一个ssh终端的效果，我把图片拖上去也能使用，非常棒。。。 jupter notebook 云服务器配置服务器我决定再来折腾一波jupter notebook的云服务器配置，智障的我一开始配的是jupter python3，导致改成python2的jupyter再配置好启动就冒了一串这个玩意： `HTTP request sent; waiting for response.[I 14:21:23.131 NotebookApp] Accepting one-time-token-authenticated connection from ::1 localhost cookie: _xsrf=2|6c33e61b|1db145affcf3b3a4ad8ed3d9c660e009|1564640483 Allow? (Y/N/Always/neVer)`狂按一波delete之后好了。。。emmm，就酱 1234567891011121314151617181920212223242526272829$jupyter notebook --generate-configIn [1]: from IPython.lib import passwdIn [2]: passwd()Enter password: Verify password: Out[2]: &apos;sha1:9c54a45da8d5:7097820a8e516d2d2698061e2bc4f843d204936a&apos; $vim ~/.jupyter/jupyter_notebook_config.py c.NotebookApp.ip=&apos;*&apos; #所有绑定服务器的IP都能访问，若想只在特定ip访问，输入ip地址即可c.NotebookApp.notebook_dir = &apos;/NFS/cany/jupyter_projects&apos;c.NotebookApp.password = u&apos;sha1:9c54a45da8d5:7097820a8e516d2d2698061e2bc4f843d204936a&apos;c.NotebookApp.open_browser = False # 代表启动notebook服务时不打开浏览器并访问c.NotebookApp.port =8888 #随便指定一个端口c.IPKernelApp.pylab = &apos;inline&apos;#在服务器端启动jupyter notebookjupyter notebook --no-browser#将远程服务器8888端口指定到本地8889端口ssh -T -L 8889:localhost:8888 TAD#在chrome中输入http://localhost:8889/tree第一次登录的时候会要求输入密码吼吼 jupyter notebook 拓展https://zhuanlan.zhihu.com/p/36389916 1234pip3 install jupyter_nbextensions_configurator --userpip3 install jupyter_contrib_nbextensions --userjupyter contrib nbextension install --userjupyter nbextensions_configurator enable --user]]></content>
  </entry>
  <entry>
    <title><![CDATA[Jupyter Notebook实现直接调用R]]></title>
    <url>%2F2019%2F10%2F09%2FJupyter%20Notebook%E5%AE%9E%E7%8E%B0%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8R%2F</url>
    <content type="text"><![CDATA[关联jupyter notebook如果你没有安装jupyter notebook，需要先安装。我推荐直接使用anaconda，上面自带jupyter notebook而且环境配置都帮你搞定了，自带python。相当于最后R和python都可以用首先我们打开R的命令行，如果不知道可以直接打开Rsudio，在坐下角的console里写如下命令： 12install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))devtools::install_github('IRkernel/IRkernel') 上面的代码会自动分两步执行，执行完后，在输入如下代码中的一个： 1234# 只在当前用户下安装IRkernel::installspec()# 或者是在系统下安装IRkernel::installspec(user = FALSE) 等待执行完毕，打开jupyter就可以新建R的notebook了。 安装rpy2接着 1pip3 install rpy2 就可以了。 开始快活 新建python的notebook，会发现调用R及其简单。 12345678#先新建个Dataframe对象a = pd.DataFrame([[1,2],[2,1]])传到R里:%%R -i aplot(a)从R里传值出来(1000个按正态分布的随机数）：%%R -o qq &lt;- rnorm(1000) Here is the way I fixed my R package version 3.0.2 python version 2.7 platform ipython notebook. Change Path for R computer-&gt; property -&gt; advanced and system setting -&gt; environment variables in the user variable field add C:\Program Files\R\R-3.0.2\bin\x64 (my system is windows 64bit) to path In the system variable field add two new variables 12R_HOME c:\program files\r\r-3.0.2R_USER C:\Users\&quot;your user name&quot;\Anaconda\Lib\site-packages\rpy2 FootNote: https://jonuknownothingsnow.github.io/2018/03/11/%E4%BD%BF%E7%94%A8jupyter%E8%BF%9B%E8%A1%8Cpython%E4%B8%8ER%E5%8D%8F%E5%90%8C/]]></content>
  </entry>
  <entry>
    <title><![CDATA[WSL配置]]></title>
    <url>%2F2019%2F10%2F09%2FWSL%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[建立ssh 服务 首先是卸载重装一遍ssh服务，自带ssh服务无法建立远程连接。 12sudo apt-get remove openssh-serversudo apt-get install openssh-server 编辑sshd_config文件，修改几处配置才能正常使用用户名/密码的方式连接 1sudo vi /etc/ssh/sshd_config 修改SSH Server的监听端口，这里修改为23。 1sudo sed -i &apos;/Port /c Port 23&apos; /etc/ssh/sshd_config 修改SSH Server的监听地址。 1sudo sed -i &apos;/ListenAddress 0.0.0.0/c ListenAddress 0.0.0.0&apos; /etc/ssh/sshd_config PasswordAuthentication yes # 允许用户名密码方式登录 修改完之后重启ssh服务 1sudo service ssh restart 修改用户名123456789101112先创建root密码：sudo -s 进入rootpasswd root后输入要创建的root密码[cany@0152LO2061907W Fri Sep 20 10:38:03]/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919$suPassword:#简单的说就是把cany全都替换成yincanroot@0152LO2061907W:/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919# vi /etc/passwdroot@0152LO2061907W:/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919# vi /etc/shadowroot@0152LO2061907W:/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919# vi /etc/grouproot@0152LO2061907W:/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919# mv /home/cany/ /home/yincanroot@0152LO2061907W:/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919# su -l yincan 在WSL上使用pythonhttp://www.erogol.com/using-windows-wsl-for-deep-learning-development/ bashrc配置1234567891011121314151617181920212223alias l=&quot;ll -hrt&quot;alias L=&quot;l -L&quot;alias les=&quot;less -S&quot;alias mkdir=&quot;mkdir -m 755 &quot;alias tarxzf=&quot;tar -xzvf&quot;alias tarxjf=&quot;tar -xjvf&quot;alias tarxf=&quot;tar -xvf&quot;alias tarcf=&quot;tar -cf&quot;alias tarczf=&quot;tar -czf&quot;alias tarcjf=&quot;tar -cjf&quot;alias rm=&quot;rm -i&quot;alias grep=&apos;grep --color=auto&apos;LANG=en_US.utf8SYSFONT=&quot;latarcyrheb-sun16&quot;SUPPORTED=&quot;zh_CN.UTF-8:zh_CN:zh&quot;export LANGPS1=&quot;\[\e[1;33m\]\u@\t \[\e[1;36m\]\w\[\e[1;35m\]\nBASH---&gt;\[\e[0;37m\] &quot; #serveralias ipython=&apos;ipython.exe&apos;alias python=&apos;python.exe -i&apos;alias pip=&apos;pip.exe&apos;# another PS1,my WSLPS1=&quot;\[\e[1;36m\]\w\[\e[1;35m\] ---&gt; \[\e[0;37m\]&quot;]]></content>
  </entry>
  <entry>
    <title><![CDATA[centOS6上实现git clone]]></title>
    <url>%2F2019%2F10%2F09%2Fcentos6%E4%B8%8Agit%20clone%2F</url>
    <content type="text"><![CDATA[git clone一直出错，最初以为是代理问题，但对git一通代理设置之后并没有什么用报错如下12345678$git clone https://github.com/***.gitfatal: unable to access 'https://github.com/***.git/': SSL connect error$ GIT_CURL_VERBOSE=1 git clone https://github.com/***.git.....* NSS error -12190* Expire cleared* Closing connection #0fatal: unable to access 'https://github.com/***.git/': SSL connect error 查看系统版本，centos6.6 网上教程是要更新~$ yum update -y nss curl，看起来一步搞定，但是我没有这个条件，服务器是通过内网上网的，所以只能手动安装，并且 更新curl的功能就好了 1、安装repo rpm -Uvh http://www.city-fan.org/ftp/contrib/yum-repo/rhel6/x86_64/city-fan.org-release-2-1.rhel6.noarch.rpm 2、查看该 repo 包含的 curl 版本 yum –showduplicates list curl –disablerepo=”*” –enablerepo=”city*” 3、修改该repo的enable为1 vi /etc/yum.repos.d/city-fan.org.repo 如下所示 [city-fan.org] name=city-fan.org repository for Red Hat Enterprise Linux (and clones) $releasever ($basearch) #baseurl=http://mirror.city-fan.org/ftp/contrib/yum-repo/rhel$releasever/$basearch mirrorlist=http://mirror.city-fan.org/ftp/contrib/yum-repo/mirrorlist-rhel$releasever enabled=1 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-city-fan.org 4、安装最新的curl 123&gt; yum --showduplicates list curl --disablerepo=&quot;*&quot; --enablerepo=&quot;city*&quot;&gt; yum install &quot;curl-7.65.0-6.0.cf.rhel6.x86_64&quot; --disablerepo=&quot;*&quot; --enablerepo=&quot;city*&quot;&gt; yum install curl 5、如果提示缺少依赖 libnghttp2.so.14()(64bit) rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/Packages/l/libnghttp2-1.6.0-1.el6.1.x86_64.rpm 下载不了就直接wget吧，然后再安装 然后重复第4步即可 6、查看curl版本 curl -V curl 7.60.0 (x86_64-conda_cos6-linux-gnu) libcurl/7.60.0 OpenSSL/1.0.2o zlib/1.2.11Release-Date: 2018-05-16Protocols: dict file ftp ftps gopher http https imap imaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftpFeatures: AsynchDNS IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP UnixSockets HTTPS-proxy]]></content>
  </entry>
</search>
