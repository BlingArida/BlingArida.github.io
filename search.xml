<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>github homepage + Hexo搭建个人博客</title>
      <link href="/2019/10/10/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/10/10/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>假期真的是太闲了，鸽了好久的搭个人博客计划启动~~</p><p>还是用最简单的github homepage+Hexo搭一个凑合用吧。。。细节我就不详细写了，照着这个步骤就差不多了<a href="https://xiaozhuanlan.com/topic/0863417529" target="_blank" rel="noopener">Footnote【1】</a></p><p>我是在自己的WSL上搭的，所以基本参考使用linux博主的过程就ok了</p><p>此处记录一些bug以及解决方法：</p><p>创建myname.github.io项目，配置ssh密钥，链接github</p><a id="more"></a><p>出现了报错，无法连接ip和端口</p><h1 id="ping-github-com拼不通"><a href="#ping-github-com拼不通" class="headerlink" title="ping github.com拼不通"></a>ping github.com拼不通</h1><p>尝试解决：打开C:\Windows\System32\drivers\etc\hosts，发现：确实没有github.com的解析</p><blockquote><p>在文件末尾添加如下内容，并保存：</p><p>192.30.255.112  github.com git<br>185.31.16.184 github.global.ssl.fastly.net</p></blockquote><p>重启cmd窗口，继续ping一下github.com：</p><blockquote><p>/mnt/d/1A/WorkNote/ —&gt; ping github.com<br>PING github.com (192.30.255.112) 56(84) bytes of data.<br>64 bytes from github.com (192.30.255.112): icmp_seq=1 ttl=39 time=199 ms<br>64 bytes from github.com (192.30.255.112): icmp_seq=2 ttl=39 time=202 ms<br>64 bytes from github.com (192.30.255.112): icmp_seq=3 ttl=39 time=200 ms<br>64 bytes from github.com (192.30.255.112): icmp_seq=4 ttl=39 time=199 ms<br>^C<br>— github.com ping statistics —<br>4 packets transmitted, 4 received, 0% packet loss, time 3003ms<br>rtt min/avg/max/mdev = 199.580/200.422/202.086/1.084 ms</p></blockquote><p>说明，本机已经能够正常解析github.com这个域名了。</p><h1 id="ssh-连接不上github"><a href="#ssh-连接不上github" class="headerlink" title="ssh 连接不上github"></a>ssh 连接不上github</h1><p>em，回上海之后，迷一样的可以了。。。</p><h2 id="配置设置"><a href="#配置设置" class="headerlink" title="配置设置"></a>配置设置</h2><p>编辑<code>_config.yml</code>文件</p><blockquote><p>deploy:</p><p>   type:git</p><p>   repo:<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:BlingArida/BlingArida.github.io.git</p><p>   branch:master</p></blockquote><h2 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h2><p><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line">然后去_config.yml 修改一下主题名字就好了</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -d</span><br></pre></td></tr></table></figure><p>报了一个错：</p><blockquote><p>Connection closed by 192.30.255.112 port 22<br>fatal: Could not read from remote repository.</p><p>Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL Something’s wrong. Maybe you can find the solution here: <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">https://hexo.io/docs/troubleshooting.html</a></p></blockquote><p>嗯，所以我在_config.yml里把git换成https了，然后搞定了</p><h3 id="站内搜索功能的实现"><a href="#站内搜索功能的实现" class="headerlink" title="站内搜索功能的实现"></a>站内搜索功能的实现</h3><p>首先，我们在终端进入blog的根目录下，执行以下命令，注意这两个都要安装：</p><p>强调一下，这里我们要实现的是全文搜索，之前看教程只装了下面那个，折腾半天搞不定站内全文搜索，只能检索标题mmp。。。</p><p>如果这个破搜索抽风的话，就去blog目录下删<code>node_modules</code>这个文件夹，重新执行这几步插件的安装</p><p><a href="https://www.itfanr.cc/2017/11/24/resolve-hexo-blog-search-exception/" target="_blank" rel="noopener">https://www.itfanr.cc/2017/11/24/resolve-hexo-blog-search-exception/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>接着，我们进入站点配置文件_config.yml,在最后新增以下内容：</p><p>#content 默认是true，即支持全文搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><p>最后，打开主题配置文件_config.yml,搜索local_search,其值改为true：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Local </span><br><span class="line">searchlocal_search:  enable: true</span><br></pre></td></tr></table></figure><h3 id="为文章内容添加统计功能，文字总数-阅读时长"><a href="#为文章内容添加统计功能，文字总数-阅读时长" class="headerlink" title="为文章内容添加统计功能，文字总数+阅读时长"></a>为文章内容添加统计功能，文字总数+阅读时长</h3><p>这个功能在next主题中已经存在了，我们只需要打开开关就行，具体步骤分为下面三步：</p><ol><li><p>终端进入blog根目录，执行下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure></li><li><p>进入站点配置文件，为blog配置统计功能，将以下代码复制到最后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br></pre></td></tr></table></figure></li><li><p>进入主题配置文件，搜素<code>symbols_count_time</code>,然后把要显示的改为<code>true</code>.<br>更深入的操作大家可以看github上的<a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">说明</a>。<br>PS：如果大家配置完成，然后检查无误后，打开页面依旧没有显示，shift+F5）.</p></li></ol><h3 id="添加版权信息"><a href="#添加版权信息" class="headerlink" title="添加版权信息"></a>添加版权信息</h3><p>编辑next/_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: true</span><br><span class="line">  post: true</span><br><span class="line">  language:</span><br></pre></td></tr></table></figure><h2 id="设置favicon图标"><a href="#设置favicon图标" class="headerlink" title="设置favicon图标"></a>设置favicon图标</h2><p>1、选择一个favicon制作网站完成制作，例如：<a href="http://www.bitbug.net/" target="_blank" rel="noopener">比特虫</a> ，制作一个16<em>16，一个32</em>32的；<br>2、两个不同尺寸大小的文件，重名为favicon-16x16-next.png和favicon-32x32-next.png；<br>2、将重命名的两个图片文件放到博客目录下的themes/next/source/images中（覆盖原来的两个默认的）</p><h2 id="图片设置"><a href="#图片设置" class="headerlink" title="图片设置"></a>图片设置</h2><p>hexo支持它的myBlog/source/images里的图片上传</p><p>在typora设置</p><p><img src="/images/1570605147289.png" alt="1570605147289"></p><p>设置好了之后，typora的开头会增加一行</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: github homepage + Hexo搭建个人博客</span><br><span class="line">typora-root-url: ..</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>这样就可以愉快地直接本地和推到git上查看图片了</p><h2 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h2><p>编辑<code>next/_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">font:</span><br><span class="line">  # Use custom fonts families or not.</span><br><span class="line">  # Depended options: `external` and `family`.</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # Uri of fonts host, e.g. //fonts.googleapis.com (Default).</span><br><span class="line">  host: https://fonts.loli.net</span><br><span class="line"></span><br><span class="line">  # Font options:</span><br><span class="line">  # `external: true` will load this font family from `host` above.</span><br><span class="line">  # `family: Times New Roman`. Without any quotes.</span><br><span class="line">  # `size: x.x`. Use `em` as unit. Default: 1 (16px)</span><br><span class="line"></span><br><span class="line">  # Global font settings used for all elements inside &lt;body&gt;.</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line">    family: &quot;Microsoft YaHei&quot;</span><br><span class="line">    size: 0.8</span><br><span class="line"></span><br><span class="line">  # Font settings for site title (.site-title).</span><br><span class="line">  title:</span><br><span class="line">    external: true</span><br><span class="line">    family: Monaco</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span><br><span class="line">  headings:</span><br><span class="line">    external: true</span><br><span class="line">    family: Monaco</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for posts (.post-body).</span><br><span class="line">  posts:</span><br><span class="line">    external: true</span><br><span class="line">    family: &quot;Microsoft YaHei&quot;</span><br><span class="line"></span><br><span class="line">  # Font settings for &lt;code&gt; and code blocks.</span><br><span class="line">  codes:</span><br><span class="line">    external: true</span><br><span class="line">    family: Monaco</span><br></pre></td></tr></table></figure><p>觉得字体略大</p><p>编辑myBlog\themes\next\source\css_variables\base.styl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$font-size-base           = 12px;</span><br></pre></td></tr></table></figure><h1 id="还想加进去的功能"><a href="#还想加进去的功能" class="headerlink" title="还想加进去的功能"></a>还想加进去的功能</h1><ol><li>增加评论功能</li><li>设置一个萌系（?）头像</li><li>发现基友的网站都能插入视频了，em下次再说</li><li>优化百度、谷歌搜索到博客，其实这个最重要。。。emmm，先鸽。。。</li></ol><h1 id="FootNotes"><a href="#FootNotes" class="headerlink" title="FootNotes"></a>FootNotes</h1><p><a href="https://xiaozhuanlan.com/topic/0863417529" target="_blank" rel="noopener">【新手向】从零开始搭建一个酷炫免费的个人博客</a></p><p><a href="https://hexo-guide.readthedocs.io/zh_CN/latest/theme.html" target="_blank" rel="noopener">https://hexo-guide.readthedocs.io/zh_CN/latest/theme.html</a></p><p><a href="https://sonichuang.github.io/SonicHuang/58b77a70/" target="_blank" rel="noopener">如何在Typora中插入本地图片和加入Readmore按钮</a></p><p><a href="https://theme-next.org/docs/theme-settings/#Fonts-Customization" target="_blank" rel="noopener">https://theme-next.org/docs/theme-settings/#Fonts-Customization</a></p><p><a href="https://io-oi.me/tech/hexo-next-optimization/#" target="_blank" rel="noopener">https://io-oi.me/tech/hexo-next-optimization/#</a></p><p><a href="http://www.ehcoo.com/seo.html" target="_blank" rel="noopener">http://www.ehcoo.com/seo.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Differential expression analysis(差异表达分析)</title>
      <link href="/2019/10/09/Differential%20expression%20analysis/"/>
      <url>/2019/10/09/Differential%20expression%20analysis/</url>
      
        <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>RNA-Seq实验设计中的“重复”包括：技术重复和生物学重复，重复是为了检测组间和组内的变异，对于假设检验至关重要。</p><ul><li>技术重复为了估计测量技术（RNA-Seq）的变异。</li><li>生物学重复是为了发现生物组内的变异。简单的说，两组的基因表达的变化只有比组内变异还大时才能认为时显著的。</li></ul><p>RNA-Seq试验中，抽样得到的raw read counts服从泊松分布。并且同一样本在两次试验中的结果不同，这称为shot noise。这种变异在RNA-Seq<strong>技术重复</strong>间成为Possion noise。生物学上不同的样本间的差异服从负二项(negative binomial)分布,有时称gamma-Poisson分布。由于RNA-Seq count数据也表现出zero inflation(大量值为0)的特征，所以很难拟合到负二项分布，所以有文章认为要用Poisson-Tweedie family建模。</p><a id="more"></a><p>基本方法就是以<strong>生物学意义</strong>的方式计算基因表达量，然后通过统计学分析表达量寻找具有<strong>统计学显著性差异</strong>的基因，从而</p><ul><li>选择合适的基因</li><li>衡量结果的可靠性</li></ul><h2 id="分析方法"><a href="#分析方法" class="headerlink" title="分析方法"></a>分析方法</h2><p>寻找差异表达基因有三种方式：</p><blockquote><p><strong>第一种</strong>是计算Fold change（倍数变化），十分简单粗暴的方法，计算方法如下：</p></blockquote><ul><li>E = mean(group1) B=mean(group2)</li><li>FC = (E-B) / min(E,B)</li></ul><p>说人话就是，基因A和基因B的平均值之差与两者中较小的比值。选择<strong>2-3</strong>倍的基因作为结果（为什么是2-3倍，就是大家约定俗成）。</p><blockquote><p><strong>第二种</strong>就是统计检验，写文章的时候总需要给出一个p值告诉主编这个结果可信的（虽然p值也存在争论）。</p></blockquote><p>复习一下：p值指的碰巧是拒绝零假设机会。P值越大假阳性越低，同时真实结果也可能会剔除。（<strong>注</strong>： 基因表达分析的零假设是： 基因在不同处理下的表达量相同。）</p><p>对于基因表达而言，研究目标是，对于同一个基因而言，他们之间的差异是处理不同造成，还是因为系统误差造成。</p><blockquote><p><strong>第三种</strong>：Fold Change + 统计检验。</p></blockquote><p>在统计检验中你找到越多的差异表达基因，在p值矫正之后，你反而找不到差异表达基因。也就是说，如果在结果中存在大量滥竽充数的所谓的DE基因，那么在严格的p值矫正筛选后，反而会误删真实的DE基因。</p><p>因此在p值矫正之前，你先要手动剔除一部分明显就是假阳性的DE基因。这个步骤就需要用到前面的fold-change分析。</p><h3 id="理论基础：线性模型，-设计矩阵和比较矩阵"><a href="#理论基础：线性模型，-设计矩阵和比较矩阵" class="headerlink" title="理论基础：线性模型， 设计矩阵和比较矩阵"></a>理论基础：线性模型， 设计矩阵和比较矩阵</h3><p><strong>线性回归</strong> 一般是用于量化的预测变量来预测量化的响应变量。比如说体重与身高的关系建模。基因表达可以简单写成， <code>y =  a + b · *treament* + e</code></p><p><strong>方差分析</strong>(Analysis of Variance, ANAOVA)名字听起来好像是检验方差，但其实是为了判断样本之间的差异是否真实存在，为此需要证明不同处理内的方差显著性大于不同处理间的方差。</p><p>最简单的单因素方差分析，每一个结果都可以看成 <code>yij = ai + u + eij</code>， 其中u是总体均值，ai是每一个处理的差异，eij是随机误差。</p><p>上述两个公式非常相似，因为线性模型和方差分析都是<strong>广义线性模型</strong>(generalizing linear models, GLM)在正态分布的预测变量的特殊形式。</p><p>目前认为read count之间的差异是符合负二项分布，也叫gamma-Possion分布。那么问题来了，如何用GLM或者LM分析两个处理件的差异呢？其实可以简单的用上图的拟合直线的斜率来解释，如果不同处理之间存在差异，那么这个拟合线的斜率必定不为零，也就是与X轴平行。但是这是一种便于理解的方式（虽然你也未必能理解），实际更加复杂，考虑因素更多。</p><p><strong>注1</strong> 负二向分布有两个参数，均值(mean)和离散值（dispersion). 离散值描述方差偏离均值的程度。泊松分布可以认为是负二向分布的离散值为1，也就是均值等于方差（mean=variance）的情况。<br><strong>注2</strong> 这部分涉及大量的统计学知识，不懂就用维基百科一个个查清楚。</p><p>下面的设计矩阵（design matrix）就很好理解了， 其实就是用来告诉==不同的差异分析函数应该如何对待变量==。比如说我们要研究的==KD和control之间变化==，设计矩阵就是</p><table><thead><tr><th>样本</th><th>处理</th></tr></thead><tbody><tr><td>sample1</td><td>control</td></tr><tr><td>sample2</td><td>control</td></tr><tr><td>sample3</td><td>KD</td></tr><tr><td>sample4</td><td>KD</td></tr></tbody></table><p>那么比较矩阵（contrast matrix)就是告诉==差异分析函数应该如何对哪个因素进行比较， 这里就是比较不同处理下表达量的变化==。</p><h1 id="二、RNA-seq的标准化"><a href="#二、RNA-seq的标准化" class="headerlink" title="二、RNA-seq的标准化"></a>二、RNA-seq的标准化</h1><p><img src="/images/9697684-9d1139dd59928dff.webp" alt="img"></p><p>From RNA-seq reads to differential expression, Oshlack et al. Genome Biology 2010</p><h2 id="基因表达标准化Normalisation"><a href="#基因表达标准化Normalisation" class="headerlink" title="基因表达标准化Normalisation"></a>基因表达标准化Normalisation</h2><p>我们在比较不同样品不同基因的差异表达情况时，期望表达水平分布符合统计方法的基本假设，但由于测序深度和基因长度的不同，直接使用原始count分析会导致假阳性和假阴性过高，因此对原始数据进行标准化/均一化是十分必要的。</p><p>根据样本间和样本内重复可以把现有的诸多标准化方法大致分为两类，一类WSN(within-sample normalization)：RPKM和quartile四分位数法；另一类BSN(between-sample normalization)：TMM和upper quartile上四分位处理。</p><p>为了方便理解，假设目前你在一次测序中(即剔除批次效应)检测了一个物种的3个样本，A,B,C，这个物种有三个基因G1,G2,G3, 基因长度分别为100, 500, 1000. 通过前期数据预处理，你得到了尚未标准化的表达量矩阵，如下所示。</p><h3 id="比较容易想到的标准化方法"><a href="#比较容易想到的标准化方法" class="headerlink" title="比较容易想到的标准化方法"></a>比较容易想到的标准化方法</h3><p>基因表达量矩阵</p><table><thead><tr><th>基因/样本</th><th>样本A</th><th>样本B</th><th>样本C</th></tr></thead><tbody><tr><td>G1(100)</td><td>300</td><td>400</td><td>500</td></tr><tr><td>G2(500)</td><td>700</td><td>750</td><td>800</td></tr><tr><td>G3(1000)</td><td>1000</td><td>1300</td><td>1800</td></tr></tbody></table><p>先说三个简单的策略，也就是最容易想到的方法</p><ul><li>Total Count, TC, 每个基因计数除以总比对数, 即文库大小, 然后乘以不同样本的总比对数的均值</li><li>Upper Quartile, UQ, 和TC方法相似, 即用上四分位数替代总比对数</li><li>Median, Med, 和TC方法相似, 用中位数代替总比对数</li></ul><p>上面方法都相似，考虑到我的例子只有三个基因，所以只展示TC方法的结果. 可以发现，原本比其他组观测值低的A-G2，目前反而是最高（表格第二行）。</p><table><thead><tr><th>TC处理后</th><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>G1</td><td>370</td><td>402.7</td><td>418.1</td></tr><tr><td>G2</td><td>863.3</td><td>744.1</td><td>543.5</td></tr><tr><td>G3</td><td>1233.3</td><td>1308.8</td><td>1505.1</td></tr></tbody></table><h3 id="CPM-counts-per-million"><a href="#CPM-counts-per-million" class="headerlink" title="CPM (counts per million)"></a>CPM (counts per million)</h3><p>如果省去TC中的 “乘以不同样本的总比对数的均值” 这一步，那么差不多就是CPM (counts per million)的策略，也就是根据直接根据深度对每个样本单独进行标准化. 在edgeR和<a href="https://genomebiology.biomedcentral.com/articles/10.1186/gb-2014-15-2-r29" target="_blank" rel="noopener">limma/voom</a>里面都有出现过。</p><p><img src="/images/1570622781905.png" alt="1570622781905"></p><p>不同样品的测序量会有差异，最简单的标准化方式是计算<code>counts per million (CPM)</code>，即原始<code>reads count</code>除以总reads数乘以1,000,000。</p><p>这种计算方式的缺点是容易受到极高表达且在不同样品中存在差异表达的基因的影响；这些基因的打开或关闭会影响到细胞中总的分子数目，可能导致这些基因标准化之后就不存在表达差异了，而原本没有差异的基因标准化之后却有差异了。RPKM、FPKM和TPM是CPM按照基因或转录本长度归一化后的表达，也会受到这一影响。</p><h3 id="其它的标准化方法"><a href="#其它的标准化方法" class="headerlink" title="其它的标准化方法"></a>其它的标准化方法</h3><p>为了解决这一问题，研究者提出了其它的标准化方法。</p><p><strong>量化因子 (size factor, SF)</strong>是由<code>DESeq</code>提出的。其方法是首先计算每个基因在所有样品中表达的几何平均值。每个细胞的量化因子(size factor)是所有基因与其在所有样品中的表达值的几何平均值的比值的中位数。由于几何平均值的使用，只有在所有样品中表达都不为0的基因才能用来计算。这一方法又被称为 <strong>RLE (relative log expression)</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">calc_sf &lt;- function (expr_mat, spikes=NULL)&#123;</span><br><span class="line">  geomeans &lt;- exp(rowMeans(log(expr_mat[-spikes,])))</span><br><span class="line">  SF &lt;- function(cnts)&#123;</span><br><span class="line">    median((cnts/geomeans)[(is.finite(geomeans) &amp; geomeans &gt;0)])</span><br><span class="line">  &#125;</span><br><span class="line">  norm_factor &lt;- apply(expr_mat[-spikes,],2,SF)</span><br><span class="line">  return(t(t(expr_mat)/norm_factor))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上四分位数 (upperquartile, UQ)</strong>是样品中所有基因的表达除以处于上四分位数的基因的表达值。同时为了保证表达水平的相对稳定，计算得到的上四分位数值要除以所有样品中上四分位数值的中位数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">calc_uq &lt;- function (expr_mat, spikes=NULL)&#123;</span><br><span class="line">  UQ &lt;- function(x) &#123;</span><br><span class="line">    quantile(x[x&gt;0],0.75)</span><br><span class="line">  &#125;</span><br><span class="line">  uq &lt;- unlist(apply(expr_mat[-spikes,],2,UQ))</span><br><span class="line">  norm_factor &lt;- uq/median(uq)</span><br><span class="line">  return(t(t(expr_mat)/norm_factor))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>TMM</strong>是M-值的加权截尾均值。选定一个样品为参照，其它样品中基因的表达相对于参照样品中对应基因表达倍数的log2值定义为M-值。随后去除M-值中最高和最低的30%，剩下的M值计算加权平均值。每一个非参照样品的基因表达值都乘以计算出的TMM。这个方法假设大部分基因的表达是没有差异的。</p><h4 id="Median-of-Ratio-DESeq2"><a href="#Median-of-Ratio-DESeq2" class="headerlink" title="Median of Ratio (DESeq2)"></a>Median of Ratio (DESeq2)</h4><p>该方法基于的假设是，即使处在不同条件下的不同个样本，大多数基因的表达是不存在差异的，实际存在差异的基因只占很小的部分那么我们只需要将这些稳定的部分找出来，作为标准化的内参，依据内参算出各个样本的标准化因子</p><p>（1）对每个基因计算几何平均数，得到一个假设的参考样本(pseudo-reference sample)</p><table><thead><tr><th align="left">gene</th><th align="left">sampleA</th><th align="left">sampleB</th><th align="left">pseudo-reference sample</th></tr></thead><tbody><tr><td align="left">EF2A</td><td align="left">1489</td><td align="left">906</td><td align="left">sqrt(1489 * 906) = 1161.5</td></tr><tr><td align="left">ABCD1</td><td align="left">22</td><td align="left">13</td><td align="left">sqrt(22 * 13) = 17.7</td></tr><tr><td align="left">…</td><td align="left">…</td><td align="left">…</td><td align="left">…</td></tr></tbody></table><p>（2）对每个样本的每个基因对于参考样本计算Fold Change</p><table><thead><tr><th align="left">gene</th><th align="left">sampleA</th><th align="left">sampleB</th><th align="left">pseudo-reference sample</th><th align="left">ratio of sampleA/ref</th><th align="left">ratio of sampleB/ref</th></tr></thead><tbody><tr><td align="left">EF2A</td><td align="left">1489</td><td align="left">906</td><td align="left">1161.5</td><td align="left">1489/1161.5 = 1.28</td><td align="left">906/1161.5 = 0.78</td></tr><tr><td align="left">ABCD1</td><td align="left">22</td><td align="left">13</td><td align="left">16.9</td><td align="left">22/16.9 = 1.30</td><td align="left">13/16.9 = 0.77</td></tr><tr><td align="left">MEFV</td><td align="left">793</td><td align="left">410</td><td align="left">570.2</td><td align="left">793/570.2 = 1.39</td><td align="left">410/570.2 = 0.72</td></tr><tr><td align="left">BAG1</td><td align="left">76</td><td align="left">42</td><td align="left">56.5</td><td align="left">76/56.5 = 1.35</td><td align="left">42/56.5 = 0.74</td></tr><tr><td align="left">MOV10</td><td align="left">521</td><td align="left">1196</td><td align="left">883.7</td><td align="left">521/883.7 = 0.590</td><td align="left">1196/883.7 = 1.35</td></tr><tr><td align="left">…</td><td align="left">…</td><td align="left">…</td><td align="left">…</td><td align="left">…</td><td align="left">…</td></tr></tbody></table><p><img src="/images/DiffExpAna-normalization-DESeq2.png" alt="img"></p><p>（3）获取每个样本中Fold Change的中位数，我们就得到了非DE基因代表的Fold Change，该基因就是我们选择的该样本的内参基因，它的Fold Change就是该样本的标准化因子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">normalization_factor_sampleA &lt;- median(c(1.28, 1.3, 1.39, 1.35, 0.59))normalization_factor_sampleB &lt;- median(c(0.78, 0.77, 0.72, 0.74, 1.35))</span><br></pre></td></tr></table></figure><h4 id="TMM-Trimmed-Mean-of-M-value-edgeR"><a href="#TMM-Trimmed-Mean-of-M-value-edgeR" class="headerlink" title="TMM (Trimmed Mean of M value, edgeR)"></a>TMM (Trimmed Mean of M value, edgeR)</h4><p>该方法的思想与DESeq2的Median of Ratio相同，假设前提都是：大多数基因的表达是不存在差异的</p><p>它与DESeq2的不同之处在于对内参的选择上：</p><blockquote><ul><li>DESeq2选择一个内参基因，它的Ratio/Fold-Change就是标准化因子</li><li>edgeR选择一组内参基因集合，它们对标准化因子的计算均有贡献：加权平均</li></ul></blockquote><p><strong>TMM（trimmed mean of M value)方法出现在2010年，比TC、 UQ、Med, CPM方法高级一点，基本假设是绝大数的基因不是差异表达基因.计算方法有点复杂，简单的说就是移除一定百分比的数据后，计算平均值作为缩放因子，对样本进行标准化。这次我们用R/edgeR来算. 和之前不同，A组的G2基因标准化后还是最低，这就是trim所引起。</strong></p><p>代表性软件edgeR，具体原理参见<a href="https://ming-lian.github.io/2019/02/08/Stat-on-RNAseq/" target="_blank" rel="noopener">Footnotes[5]</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; library(edgeR)</span><br><span class="line">&gt; expr &lt;- matrix(c(300,400,500,700,750,650,1000,1300,1800),nrow = 3,byrow = TRUE)</span><br><span class="line">&gt; f &lt;- calcNormFactors(expr, method = &quot;TMM&quot;)</span><br><span class="line">&gt; mt_norm &lt;- t(t(mt) /f )</span><br><span class="line">&gt; mt_norm</span><br><span class="line">          [,1]      [,2]      [,3]</span><br><span class="line">[1,]  303.0164  402.5300  491.9114</span><br><span class="line">[2,]  707.0382  754.7438  787.0583</span><br><span class="line">[3,] 1010.0545 1308.2226 1770.8811</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>*<em>DESeq2/DESeq有自己专门的计算缩放因子(scaling factor)的策略，它的基本假设就是绝大部分的基因表达在处理前后不会有显著性差异，表达量应该相似，据此计算每个基因在所有样本中的几何平均值(geometri mean), 每个样本的各个基因和对应的几何平均数的比值(fold change)的中位数就是缩放因子(scaling factor). *</em></p><ul><li>内参基因，House-keeping gene(s)。某一基因在样本中的表达肯定是一样的。(有限制，依赖基因的功能注释，数目少准确不高。)</li><li>通用方法：<strong>假设大多数基因是没有差异表达的</strong>。统计学方法找到标准化的因子。</li><li>DESeq2(estimateSizeFactors/sizeFactors)、edgeR（TMM,calcNormFactors）。差异表达分析鉴定软件。</li><li>输入文件是reads count矩阵。</li></ul><p><strong>上述方法都是对样本整体进行标准化，标准化的结果只能比较不同样本之间的同一个基因的表达水平。</strong></p><p>如果要同时比较不同样本不同基因之间的表达量差异，就得考虑到每个基因的转录本长度未必相同，毕竟转录本越长，打算成片段后被观察到的概率会高一点。此处不做展开。</p><p>对于差异表达分析而言，标准化不但要考虑测序深度的问题，还要考虑到<strong>某些表达量超高或者极显著差异表达的基因导致count的分布出现偏倚</strong>, 推荐用TMM, DESeq方法进行标准化。</p><h1 id="三、DESeq2-分析差异表达"><a href="#三、DESeq2-分析差异表达" class="headerlink" title="三、DESeq2 分析差异表达"></a>三、DESeq2 分析差异表达</h1><h2 id="1-DESeq2差异分析基本流程"><a href="#1-DESeq2差异分析基本流程" class="headerlink" title="1. DESeq2差异分析基本流程"></a>1. DESeq2差异分析基本流程</h2><ul><li><p>对于DESeq2需要输入的三个数据：<strong>表达矩阵、样品信息矩阵、差异比较矩阵</strong> </p></li><li><p>而对于DESeq2的差异分析步骤，总结起来就是三步： </p><ul><li><font color="darkred"><strong>构建一个dds(DESeqDataSet)的对象</strong></font>；</li></ul></li><li><p><font color="darkred"><strong>利用DESeq函数进行标准化处理</strong></font>；</p><ul><li><font color="darkred"><strong>用result函数来提取差异比较的结果</strong></font>。</li></ul></li></ul><h2 id="2-构建dds矩阵"><a href="#2-构建dds矩阵" class="headerlink" title="2. 构建dds矩阵"></a>2. 构建dds矩阵</h2><ul><li>构建dds矩阵的基本代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dds &lt;- DESeqDataSetFromMatrix(countData = cts, colData = coldata, design= ~ batch + condition)</span><br></pre></td></tr></table></figure><ul><li>其输入的三个文件：<ul><li><strong>表达矩阵</strong>：countData，就是通过之前的HTSeq-count生成的reads-count计算融合的矩阵。行为基因名，列为样品名，值为reads或fragment的整数。</li><li><strong>样品信息矩阵</strong>：colData，它的类型是一个dataframe（数据框），第一列是样品名称，第二列是样品的处理情况（对照还是处理等）。可以从表达矩阵中导出或是自己单独建立。</li><li><strong>差异比较矩阵</strong>：design，差异比较矩阵就是告诉差异分析函数哪些是对照，哪些是处理。</li></ul></li></ul><h3 id="r代码"><a href="#r代码" class="headerlink" title="r代码"></a>r代码</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">raw_count &lt;- read.csv(<span class="string">'D:/1A/RNAseq/analysis/clone_dist.csv'</span>)</span><br><span class="line">head(raw_count)</span><br><span class="line">count_data &lt;- raw_count[,<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">head(count_data)</span><br><span class="line">row.names(count_data) &lt;- raw_count[,<span class="number">1</span>]</span><br><span class="line">condition &lt;- factor(c(<span class="string">"rep"</span>,<span class="string">"condition"</span>,<span class="string">"condition"</span>))</span><br><span class="line">col_data &lt;- data.frame(row.names = colnames(count_data), condition)</span><br><span class="line"><span class="keyword">library</span>(<span class="string">'DESeq2'</span>)</span><br><span class="line">dds &lt;- DESeqDataSetFromMatrix(countData = count_data,colData = col_data,design = ~ condition)</span><br><span class="line">nrow(dds)</span><br><span class="line">dds_filter &lt;- dds[ rowSums(counts(dds))&gt;<span class="number">1</span>, ]</span><br><span class="line">dds_out &lt;- DESeq(dds_filter)</span><br><span class="line">res &lt;- results(dds_out)</span><br><span class="line">summary(res)</span><br><span class="line">table(res$padj&lt;<span class="number">0.05</span>)</span><br><span class="line">res_deseq &lt;- res[order(res$padj),]</span><br><span class="line"><span class="comment">#一般选取Foldchange值和经过FDR矫正过后的p值，取padj值(p值经过多重校验校正后的值)小于0.05，log2FoldChange大于1的基因作为差异基因集</span></span><br><span class="line">diff_gene_deseq2 &lt;- subset(res_deseq, padj&lt;<span class="number">0.05</span> &amp; (log2FoldChange &gt; <span class="number">1</span> | log2FoldChange &lt; -<span class="number">1</span>))</span><br><span class="line">res_diff_data &lt;- merge(as.data.frame(res),as.data.frame(counts(dds_out,normalize=<span class="literal">TRUE</span>)),by=<span class="string">"row.names"</span>,sort=<span class="literal">FALSE</span>)</span><br><span class="line">write.csv(res_diff_data,file = <span class="string">"alpaca_data_new.csv"</span>,row.names = <span class="literal">F</span>)</span><br><span class="line">rld &lt;- rlog(dds, blind = <span class="literal">FALSE</span>)</span><br><span class="line">plotPCA(rld,intgroup=c(<span class="string">"condition"</span>))</span><br><span class="line"><span class="keyword">library</span>(<span class="string">"genefilter"</span>)</span><br><span class="line"><span class="keyword">library</span>(<span class="string">"pheatmap"</span>)</span><br><span class="line">topVarGene &lt;- head(order(rowVars(assay(rld)),decreasing = <span class="literal">TRUE</span>),<span class="number">50</span>)</span><br><span class="line">mat  &lt;- assay(rld)[ topVarGene, ]</span><br><span class="line">pheatmap(mat, annotation_col=col_data)</span><br><span class="line">pheatmap(mat,cluster_row=<span class="literal">T</span>,scale=<span class="string">"row"</span>, annotation_col=col_data) res0.5 &lt;- results(dds, contrast = c(<span class="string">"condition"</span>,<span class="string">"Basal"</span>,<span class="string">"LP"</span>),alpha=<span class="number">0.05</span>)</span><br><span class="line"><span class="comment">#另一种绘图方式</span></span><br><span class="line">mat  &lt;- mat - rowMeans(mat)</span><br><span class="line">pheatmap(mat, annotation_col=col_data)</span><br></pre></td></tr></table></figure><h1 id="Footnotes"><a href="#Footnotes" class="headerlink" title="Footnotes"></a>Footnotes</h1><ol><li><a href="https://www.plob.org/article/11574.html" target="_blank" rel="noopener">https://www.plob.org/article/11574.html</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI1MjU5MjMzNA==&amp;mid=2247484514&amp;idx=1&amp;sn=1c6d227c6d7ac432d8baffb93b0b9072&amp;chksm=e9e02dc3de97a4d59d918ee37655153fa4ccc8122e3259c0201ff441c922548f22f84311ad91&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI1MjU5MjMzNA==&amp;mid=2247484514&amp;idx=1&amp;sn=1c6d227c6d7ac432d8baffb93b0b9072&amp;chksm=e9e02dc3de97a4d59d918ee37655153fa4ccc8122e3259c0201ff441c922548f22f84311ad91&amp;scene=21#wechat_redirect</a></li><li><a href="https://www.jianshu.com/p/2a52845cfa5d" target="_blank" rel="noopener">RNA-seq的标准化方法罗列</a></li><li><a href="https://www.jianshu.com/p/a9d5065f82a6" target="_blank" rel="noopener">当我们在说RNA-seq reads count标准化时，其实在说什么？</a></li><li><a href="https://ming-lian.github.io/2019/02/08/Stat-on-RNAseq/" target="_blank" rel="noopener">RNA-seq中的那些统计学问题</a></li><li><a href="....\RNAseq\DESeq2\DESeq2差异基因分析和批次效应移除-生信宝典.html">DESeq2差异基因分析和批次效应移除-生信宝典.html</a> </li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python云服务器配置</title>
      <link href="/2019/10/09/python%20%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/10/09/python%20%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="VScode-Remote"><a href="#VScode-Remote" class="headerlink" title="VScode Remote"></a>VScode Remote</h1><p>今天抱着不想上班的心情迎来了高温假后的第一个工作日，吭哧吭哧本地装好了python2 发现没有我需要的包，我还只能在服务器上用那个只有linux和OS的软件。。。</p><p>折腾了一波 vscode的remote-ssh，妈蛋服务器端下载又不行</p><h2 id="挂上了wget的代理"><a href="#挂上了wget的代理" class="headerlink" title="挂上了wget的代理"></a>挂上了wget的代理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$cat ~/.wgetrc</span><br><span class="line">use_proxy=on</span><br><span class="line">#check-certificate=off</span><br><span class="line">http_proxy=http://127.0.0.1:9293</span><br><span class="line">https_proxy=http://127.0.0.1:9293</span><br></pre></td></tr></table></figure><a id="more"></a><p>之后，是能下载了，但是centos6的基本库又有问题，我来更新它的权限不是很够，还有gcc的版本要调，由于工程太过浩大，鸽。。。</p><p>emmm centos6安装了依赖包之后，蜜汁可以了，非常佛</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-2.17-55.el6.x86_64.rpm</span><br><span class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-common-2.17-55.el6.x86_64.rpm</span><br><span class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-devel-2.17-55.el6.x86_64.rpm</span><br><span class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-headers-2.17-55.el6.x86_64.rpm</span><br><span class="line">wget https://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-utils-2.17-55.el6.x86_64.rpm</span><br><span class="line">wget https://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-static-2.17-55.el6.x86_64.rpm</span><br><span class="line"></span><br><span class="line">wget https://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/gcc-4.8.2-16.3.fc20/libstdc++-4.8.2-16.3.el6.x86_64.rpm</span><br><span class="line">wget  https://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/gcc-4.8.2-16.3.fc20/libstdc++-devel-4.8.2-16.3.el6.x86_64.rpm</span><br><span class="line">wget https://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/gcc-4.8.2-16.3.fc20/libstdc++-static-4.8.2-16.3.el6.x86_64.rpm</span><br><span class="line"></span><br><span class="line">sudo rpm -Uh --force --nodeps     glibc-2.17-55.el6.x86_64.rpm     glibc-common-2.17-55.el6.x86_64.rpm     glibc-devel-2.17-55.el6.x86_64.rpm     glibc-headers-2.17-55.el6.x86_64.rpm     glibc-static-2.17-55.el6.x86_64.rpm     glibc-utils-2.17-55.el6.x86_64.rpm</span><br><span class="line">sudo rpm -Uh     libstdc++-4.8.2-16.3.el6.x86_64.rpm     libstdc++-devel-4.8.2-16.3.el6.x86_64.rpm     libstdc++-static-4.8.2-16.3.el6.x86_64.rpm</span><br></pre></td></tr></table></figure><p>然后就可以体验vscode的远程界面了</p><h2 id="在服务器上也安装好相关需要的插件"><a href="#在服务器上也安装好相关需要的插件" class="headerlink" title="在服务器上也安装好相关需要的插件"></a>在服务器上也安装好相关需要的插件</h2><p>vscode remote非常迷，达到了一个ssh终端的效果，我把图片拖上去也能使用，非常棒。。。</p><h1 id="jupter-notebook-云服务器配置服务器"><a href="#jupter-notebook-云服务器配置服务器" class="headerlink" title="jupter notebook 云服务器配置服务器"></a>jupter notebook 云服务器配置服务器</h1><p>我决定再来折腾一波jupter notebook的云服务器配置，智障的我一开始配的是jupter python3，导致改成python2的jupyter再配置好启动就冒了一串这个玩意：</p><p>`HTTP request sent; waiting for response.[I 14:21:23.131 NotebookApp] Accepting one-time-token-authenticated connection from ::1</p><p>localhost cookie: _xsrf=2|6c33e61b|1db145affcf3b3a4ad8ed3d9c660e009|1564640483 Allow? (Y/N/Always/neVer)`狂按一波delete之后好了。。。emmm，就酱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$jupyter notebook --generate-config</span><br><span class="line"></span><br><span class="line">In [1]: from IPython.lib import passwd</span><br><span class="line"></span><br><span class="line">In [2]: passwd()</span><br><span class="line">Enter password: </span><br><span class="line">Verify password: </span><br><span class="line">Out[2]: &apos;sha1:9c54a45da8d5:7097820a8e516d2d2698061e2bc4f843d204936a&apos; </span><br><span class="line"></span><br><span class="line">$vim ~/.jupyter/jupyter_notebook_config.py </span><br><span class="line"></span><br><span class="line">c.NotebookApp.ip=&apos;*&apos; #所有绑定服务器的IP都能访问，若想只在特定ip访问，输入ip地址即可</span><br><span class="line">c.NotebookApp.notebook_dir = &apos;/NFS/cany/jupyter_projects&apos;</span><br><span class="line">c.NotebookApp.password = u&apos;sha1:9c54a45da8d5:7097820a8e516d2d2698061e2bc4f843d204936a&apos;</span><br><span class="line">c.NotebookApp.open_browser = False # 代表启动notebook服务时不打开浏览器并访问</span><br><span class="line">c.NotebookApp.port =8888 #随便指定一个端口</span><br><span class="line">c.IPKernelApp.pylab = &apos;inline&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#在服务器端启动jupyter notebook</span><br><span class="line">jupyter notebook --no-browser</span><br><span class="line"></span><br><span class="line">#将远程服务器8888端口指定到本地8889端口</span><br><span class="line">ssh -T -L 8889:localhost:8888 TAD</span><br><span class="line"></span><br><span class="line">#在chrome中输入http://localhost:8889/tree</span><br><span class="line">第一次登录的时候会要求输入密码吼吼</span><br></pre></td></tr></table></figure><p><img src="/images/1570605051706.png" alt="1570605051706"></p><h2 id="jupyter-notebook-拓展"><a href="#jupyter-notebook-拓展" class="headerlink" title="jupyter notebook 拓展"></a>jupyter notebook 拓展</h2><p><a href="https://zhuanlan.zhihu.com/p/36389916" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/36389916</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip3 install jupyter_nbextensions_configurator --user</span><br><span class="line">pip3 install jupyter_contrib_nbextensions --user</span><br><span class="line">jupyter contrib nbextension install --user</span><br><span class="line">jupyter nbextensions_configurator enable --user</span><br></pre></td></tr></table></figure><p><img src="/1570605066407.png" alt="1570605066407"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter Notebook实现直接调用R</title>
      <link href="/2019/10/09/Jupyter%20Notebook%E5%AE%9E%E7%8E%B0%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8R/"/>
      <url>/2019/10/09/Jupyter%20Notebook%E5%AE%9E%E7%8E%B0%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8R/</url>
      
        <content type="html"><![CDATA[<h2 id="关联jupyter-notebook"><a href="#关联jupyter-notebook" class="headerlink" title="关联jupyter notebook"></a>关联jupyter notebook</h2><p>如果你没有安装jupyter notebook，需要先安装。我推荐直接使用anaconda，上面自带jupyter notebook而且环境配置都帮你搞定了，自带python。</p><p>相当于最后R和python都可以用</p><p>首先我们打开R的命令行，如果不知道可以直接打开Rsudio，在坐下角的console里写如下命令：</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))</span><br><span class="line">devtools::install_github('IRkernel/IRkernel')</span><br></pre></td></tr></table></figure><p>上面的代码会自动分两步执行，执行完后，在输入如下代码中的一个：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 只在当前用户下安装</span></span><br><span class="line">IRkernel::installspec()</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者是在系统下安装</span></span><br><span class="line">IRkernel::installspec(user = FALSE)</span><br></pre></td></tr></table></figure><p>等待执行完毕，打开jupyter就可以新建R的notebook了。</p><h2 id="安装rpy2"><a href="#安装rpy2" class="headerlink" title="安装rpy2"></a>安装rpy2</h2><p>接着</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install rpy2</span><br></pre></td></tr></table></figure><p>就可以了。</p><p>开始快活</p><p>新建python的notebook，会发现调用R及其简单。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">先新建个Dataframe对象</span></span><br><span class="line">a = pd.DataFrame([[1,2],[2,1]])</span><br><span class="line">传到R里:</span><br><span class="line"><span class="meta">%</span><span class="bash">%R -i a</span></span><br><span class="line">plot(a)</span><br><span class="line">从R里传值出来(1000个按正态分布的随机数）：</span><br><span class="line"><span class="meta">%</span><span class="bash">%R -o q</span></span><br><span class="line">q &lt;- rnorm(1000)</span><br></pre></td></tr></table></figure><p>Here is the way I fixed my <strong>R</strong> package version <strong>3.0.2</strong> python version <strong>2.7</strong> platform ipython notebook.</p><p>Change Path for R computer-&gt; property -&gt; advanced and system setting -&gt; environment variables</p><p>in the user variable field add <code>C:\Program Files\R\R-3.0.2\bin\x64</code> (my system is windows 64bit) to path</p><p>In the system variable field add two new variables</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R_HOME    c:\program files\r\r-3.0.2</span><br><span class="line">R_USER    C:\Users\&quot;your user name&quot;\Anaconda\Lib\site-packages\rpy2</span><br></pre></td></tr></table></figure><p>FootNote:  </p><p><a href="https://jonuknownothingsnow.github.io/2018/03/11/%E4%BD%BF%E7%94%A8jupyter%E8%BF%9B%E8%A1%8Cpython%E4%B8%8ER%E5%8D%8F%E5%90%8C/" target="_blank" rel="noopener">https://jonuknownothingsnow.github.io/2018/03/11/%E4%BD%BF%E7%94%A8jupyter%E8%BF%9B%E8%A1%8Cpython%E4%B8%8ER%E5%8D%8F%E5%90%8C/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WSL配置</title>
      <link href="/2019/10/09/WSL%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/10/09/WSL%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="建立ssh-服务"><a href="#建立ssh-服务" class="headerlink" title="建立ssh 服务"></a>建立ssh 服务</h2><ul><li><p>首先是卸载重装一遍ssh服务，自带ssh服务无法建立远程连接。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">remove</span> openssh-server</span><br><span class="line">sudo apt-<span class="keyword">get</span> install openssh-server</span><br></pre></td></tr></table></figure></li><li><p>编辑sshd_config文件，修改几处配置才能正常使用用户名/密码的方式连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><p>  修改SSH Server的监听端口，这里修改为<code>23</code>。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i &apos;/Port /c Port 23&apos; /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>  修改SSH Server的监听地址。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i &apos;/ListenAddress 0.0.0.0/c ListenAddress 0.0.0.0&apos; /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>  <code>PasswordAuthentication yes # 允许用户名密码方式登录</code></p><ul><li><p>修改完之后重启ssh服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">先创建root密码：sudo -s 进入root</span><br><span class="line">passwd root后输入要创建的root密码</span><br><span class="line"></span><br><span class="line">[cany@0152LO2061907W Fri Sep 20 10:38:03]/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919</span><br><span class="line">$su</span><br><span class="line">Password:</span><br><span class="line">#简单的说就是把cany全都替换成yincan</span><br><span class="line">root@0152LO2061907W:/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919# vi /etc/passwd</span><br><span class="line">root@0152LO2061907W:/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919# vi /etc/shadow</span><br><span class="line">root@0152LO2061907W:/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919# vi  /etc/group</span><br><span class="line">root@0152LO2061907W:/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919# mv /home/cany/ /home/yincan</span><br><span class="line">root@0152LO2061907W:/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919# su -l yincan</span><br></pre></td></tr></table></figure><h2 id="在WSL上使用python"><a href="#在WSL上使用python" class="headerlink" title="在WSL上使用python"></a>在WSL上使用python</h2><p><a href="http://www.erogol.com/using-windows-wsl-for-deep-learning-development/" target="_blank" rel="noopener">http://www.erogol.com/using-windows-wsl-for-deep-learning-development/</a></p><p><img src="/images/1570605454511.png" alt="1570605454511"></p><h3 id="bashrc配置"><a href="#bashrc配置" class="headerlink" title="bashrc配置"></a>bashrc配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">alias l=&quot;ll -hrt&quot;</span><br><span class="line">alias L=&quot;l -L&quot;</span><br><span class="line">alias les=&quot;less -S&quot;</span><br><span class="line">alias mkdir=&quot;mkdir -m 755 &quot;</span><br><span class="line">alias tarxzf=&quot;tar -xzvf&quot;</span><br><span class="line">alias tarxjf=&quot;tar -xjvf&quot;</span><br><span class="line">alias tarxf=&quot;tar -xvf&quot;</span><br><span class="line">alias tarcf=&quot;tar -cf&quot;</span><br><span class="line">alias tarczf=&quot;tar -czf&quot;</span><br><span class="line">alias tarcjf=&quot;tar -cjf&quot;</span><br><span class="line">alias rm=&quot;rm -i&quot;</span><br><span class="line">alias grep=&apos;grep --color=auto&apos;</span><br><span class="line">LANG=en_US.utf8</span><br><span class="line">SYSFONT=&quot;latarcyrheb-sun16&quot;</span><br><span class="line">SUPPORTED=&quot;zh_CN.UTF-8:zh_CN:zh&quot;</span><br><span class="line">export LANG</span><br><span class="line">PS1=&quot;\[\e[1;33m\]\u@\t \[\e[1;36m\]\w\[\e[1;35m\]\nBASH---&gt;\[\e[0;37m\] &quot;     #server</span><br><span class="line">alias ipython=&apos;ipython.exe&apos;</span><br><span class="line">alias python=&apos;python.exe -i&apos;</span><br><span class="line">alias pip=&apos;pip.exe&apos;</span><br><span class="line"></span><br><span class="line"># another PS1,my WSL</span><br><span class="line">PS1=&quot;\[\e[1;36m\]\w\[\e[1;35m\] ---&gt; \[\e[0;37m\]&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centOS6上实现git clone</title>
      <link href="/2019/10/09/centos6%E4%B8%8Agit%20clone/"/>
      <url>/2019/10/09/centos6%E4%B8%8Agit%20clone/</url>
      
        <content type="html"><![CDATA[<p>git clone一直出错，最初以为是代理问题，但对git一通代理设置之后并没有什么用</p><p>报错如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">clone</span> https://github.com/***.git</span><br><span class="line">fatal: unable to access <span class="string">'https://github.com/***.git/'</span>: SSL connect error</span><br><span class="line">$ GIT_CURL_VERBOSE=1 git <span class="built_in">clone</span> https://github.com/***.git</span><br><span class="line">.....</span><br><span class="line">* NSS error -12190</span><br><span class="line">* Expire cleared</span><br><span class="line">* Closing connection <span class="comment">#0</span></span><br><span class="line">fatal: unable to access <span class="string">'https://github.com/***.git/'</span>: SSL connect error</span><br></pre></td></tr></table></figure><a id="more"></a><p>查看系统版本，centos6.6</p><p>网上教程是要更新~$ yum update -y nss curl，看起来一步搞定，但是我没有这个条件，服务器是通过内网上网的，所以只能手动安装，并且 更新curl的功能就好了</p><blockquote><p>1、安装repo</p><p>rpm -Uvh  <a href="http://www.city-fan.org/ftp/contrib/yum-repo/rhel6/x86_64/city-fan.org-release-2-1.rhel6.noarch.rpm" target="_blank" rel="noopener">http://www.city-fan.org/ftp/contrib/yum-repo/rhel6/x86_64/city-fan.org-release-2-1.rhel6.noarch.rpm</a></p><p>2、查看该 repo 包含的 curl 版本</p><p>yum –showduplicates list curl –disablerepo=”*”  –enablerepo=”city*”</p><p>3、修改该repo的enable为1</p><p>vi /etc/yum.repos.d/city-fan.org.repo</p><p>如下所示</p><p>[city-fan.org]</p><p>name=city-fan.org repository for Red Hat Enterprise Linux (and clones) $releasever ($basearch)</p><p>#baseurl=<a href="http://mirror.city-fan.org/ftp/contrib/yum-repo/rhel$releasever/$basearch" target="_blank" rel="noopener">http://mirror.city-fan.org/ftp/contrib/yum-repo/rhel$releasever/$basearch</a></p><p>mirrorlist=<a href="http://mirror.city-fan.org/ftp/contrib/yum-repo/mirrorlist-rhel$releasever" target="_blank" rel="noopener">http://mirror.city-fan.org/ftp/contrib/yum-repo/mirrorlist-rhel$releasever</a></p><p>enabled=1</p><p>gpgcheck=1</p><p>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-city-fan.org</p><p>4、安装最新的curl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; yum --showduplicates list curl --disablerepo=&quot;*&quot;  --enablerepo=&quot;city*&quot;</span><br><span class="line">&gt; yum install  &quot;curl-7.65.0-6.0.cf.rhel6.x86_64&quot; --disablerepo=&quot;*&quot;  --enablerepo=&quot;city*&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><del>yum install curl</del></p><p>5、如果提示缺少依赖 libnghttp2.so.14()(64bit)</p><p>rpm -ivh <a href="http://dl.fedoraproject.org/pub/epel/6/x86_64/Packages/l/libnghttp2-1.6.0-1.el6.1.x86_64.rpm" target="_blank" rel="noopener">http://dl.fedoraproject.org/pub/epel/6/x86_64/Packages/l/libnghttp2-1.6.0-1.el6.1.x86_64.rpm</a></p><p><strong>下载不了就直接wget吧，然后再安装</strong></p><p>然后重复第4步即可</p><p>6、查看curl版本</p><p>curl -V</p><p>curl 7.60.0 (x86_64-conda_cos6-linux-gnu) libcurl/7.60.0 OpenSSL/1.0.2o zlib/1.2.11<br>Release-Date: 2018-05-16<br>Protocols: dict file ftp ftps gopher http https imap imaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp<br>Features: AsynchDNS IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP UnixSockets HTTPS-proxy</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
