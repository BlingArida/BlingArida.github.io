<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[github homepage + Hexo搭建个人博客]]></title>
    <url>%2F2019%2F10%2F09%2F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[假期真的是太闲了，鸽了好久的搭个人博客计划启动~~ 还是用最简单的github homepage+Hexo搭一个凑合这用吧。。。细节我就不详细写了，照着这个步骤就差不多了Footnote 我是在自己的WSL上搭的，所以基本参考使用linux博主的过程就ok了 此处记录一些bug以及解决方法： 创建myname.github.io项目，配置ssh密钥，链接github 出现了报错，无法连接ip和端口 ping github.com拼不通尝试解决：打开C:\Windows\System32\drivers\etc\hosts，发现：确实没有github.com的解析 在文件末尾添加如下内容，并保存： 192.30.255.112 github.com git185.31.16.184 github.global.ssl.fastly.net 重启cmd窗口，继续ping一下github.com： /mnt/d/1A/WorkNote/ —&gt; ping github.comPING github.com (192.30.255.112) 56(84) bytes of data.64 bytes from github.com (192.30.255.112): icmp_seq=1 ttl=39 time=199 ms64 bytes from github.com (192.30.255.112): icmp_seq=2 ttl=39 time=202 ms64 bytes from github.com (192.30.255.112): icmp_seq=3 ttl=39 time=200 ms64 bytes from github.com (192.30.255.112): icmp_seq=4 ttl=39 time=199 ms^C— github.com ping statistics —4 packets transmitted, 4 received, 0% packet loss, time 3003msrtt min/avg/max/mdev = 199.580/200.422/202.086/1.084 ms 说明，本机已经能够正常解析github.com这个域名了。 ssh 连接不上githubem，回上海之后，迷一样的可以了。。。 配置设置编辑_config.yml文件 deploy: type:git repo:git@github.com:BlingArida/BlingArida.github.io.git branch:master 设置主题https://github.com/theme-next/hexo-theme-next 12git clone https://github.com/theme-next/hexo-theme-next themes/next然后去_config.yml 修改一下主题名字就好了 1hexo -d 报了一个错： Connection closed by 192.30.255.112 port 22fatal: Could not read from remote repository. Please make sure you have the correct access rightsand the repository exists.FATAL Something’s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html 嗯，所以我在_config.yml里把git换成https了，然后搞定了 站内搜索功能的实现文章写多了，想一篇篇的去寻找可不容易，这时候，我们便需要一个站内的搜索功能，即服务别人，也能方便自己。首先，我们在终端进入blog的根目录下，执行以下命令，注意这两个都要安装： 12npm install hexo-generator-search --savenpm install hexo-generator-searchdb --save 接着，我们进入站点配置文件_config.yml,在最后新增以下内容： 12345search: path: search.xml field: post format: html limit: 10000 最后，打开主题配置文件_config.yml,搜索local_search,其值改为true： 12# Local searchlocal_search: enable: true 这个站内搜索不是很好用~~ 为文章内容添加统计功能，文字总数+阅读时长这个功能在next主题中已经存在了，我们只需要打开开关就行，具体步骤分为下面三步： 终端进入blog根目录，执行下面代码： 1npm install hexo-symbols-count-time --save 进入站点配置文件，为blog配置统计功能，将以下代码复制到最后： 12345symbols_count_time: symbols: true time: true total_symbols: true total_time: true 进入主题配置文件，搜素symbols_count_time,然后把要显示的改为true.更深入的操作大家可以看github上的说明。PS：如果大家配置完成，然后检查无误后，打开页面依旧没有显示，不要着急，第一次显示可能会比较慢，可以休息一会。（本人多次从头配置都没有效果，一气之下去睡了个午觉，醒来就好了0.0）. 图片设置hexo支持它的myBlog/source/images里的图片上传 在typora设置 FootNotes【新手向】从零开始搭建一个酷炫免费的个人博客 hexo next主题优化，打造个人精致网站]]></content>
  </entry>
  <entry>
    <title><![CDATA[centOS6上实现git clone]]></title>
    <url>%2F2019%2F10%2F09%2Fcentos6%E4%B8%8Agit%20clone%2F</url>
    <content type="text"><![CDATA[git clone一直出错，最初以为是代理问题，但对git一通代理设置之后并没有什么用 报错如下 12345678$git clone https://github.com/***.gitfatal: unable to access 'https://github.com/***.git/': SSL connect error$ GIT_CURL_VERBOSE=1 git clone https://github.com/***.git.....* NSS error -12190* Expire cleared* Closing connection #0fatal: unable to access 'https://github.com/***.git/': SSL connect error 查看系统版本，centos6.6 网上教程是要更新~$ yum update -y nss curl，看起来一步搞定，但是我没有这个条件，服务器是通过内网上网的，所以只能手动安装，并且 更新curl的功能就好了 1、安装repo rpm -Uvh http://www.city-fan.org/ftp/contrib/yum-repo/rhel6/x86_64/city-fan.org-release-2-1.rhel6.noarch.rpm 2、查看该 repo 包含的 curl 版本 yum –showduplicates list curl –disablerepo=”*” –enablerepo=”city*” 3、修改该repo的enable为1 vi /etc/yum.repos.d/city-fan.org.repo 如下所示 [city-fan.org] name=city-fan.org repository for Red Hat Enterprise Linux (and clones) $releasever ($basearch) #baseurl=http://mirror.city-fan.org/ftp/contrib/yum-repo/rhel$releasever/$basearch mirrorlist=http://mirror.city-fan.org/ftp/contrib/yum-repo/mirrorlist-rhel$releasever enabled=1 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-city-fan.org 4、安装最新的curl 123&gt; yum --showduplicates list curl --disablerepo=&quot;*&quot; --enablerepo=&quot;city*&quot;&gt; yum install &quot;curl-7.65.0-6.0.cf.rhel6.x86_64&quot; --disablerepo=&quot;*&quot; --enablerepo=&quot;city*&quot;&gt; yum install curl 5、如果提示缺少依赖 libnghttp2.so.14()(64bit) rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/Packages/l/libnghttp2-1.6.0-1.el6.1.x86_64.rpm 下载不了就直接wget吧，然后再安装 然后重复第4步即可 6、查看curl版本 curl -V curl 7.60.0 (x86_64-conda_cos6-linux-gnu) libcurl/7.60.0 OpenSSL/1.0.2o zlib/1.2.11Release-Date: 2018-05-16Protocols: dict file ftp ftps gopher http https imap imaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftpFeatures: AsynchDNS IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP UnixSockets HTTPS-proxy]]></content>
  </entry>
  <entry>
    <title><![CDATA[WSL配置]]></title>
    <url>%2F2019%2F10%2F09%2FWSL%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[建立ssh 服务 首先是卸载重装一遍ssh服务，自带ssh服务无法建立远程连接。 12sudo apt-get remove openssh-serversudo apt-get install openssh-server 编辑sshd_config文件，修改几处配置才能正常使用用户名/密码的方式连接 1sudo vi /etc/ssh/sshd_config 修改SSH Server的监听端口，这里修改为23。 1sudo sed -i &apos;/Port /c Port 23&apos; /etc/ssh/sshd_config 修改SSH Server的监听地址。 1sudo sed -i &apos;/ListenAddress 0.0.0.0/c ListenAddress 0.0.0.0&apos; /etc/ssh/sshd_config PasswordAuthentication yes # 允许用户名密码方式登录 修改完之后重启ssh服务 1sudo service ssh restart 修改用户名123456789101112先创建root密码：sudo -s 进入rootpasswd root后输入要创建的root密码[cany@0152LO2061907W Fri Sep 20 10:38:03]/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919$suPassword:#简单的说就是把cany全都替换成yincanroot@0152LO2061907W:/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919# vi /etc/passwdroot@0152LO2061907W:/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919# vi /etc/shadowroot@0152LO2061907W:/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919# vi /etc/grouproot@0152LO2061907W:/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919# mv /home/cany/ /home/yincanroot@0152LO2061907W:/mnt/d/1A/Synthetic_library_design/GermlineGrouping20190919# su -l yincan 在WSL上使用pythonhttp://www.erogol.com/using-windows-wsl-for-deep-learning-development/ bashrc配置1234567891011121314151617181920212223alias l=&quot;ll -hrt&quot;alias L=&quot;l -L&quot;alias les=&quot;less -S&quot;alias mkdir=&quot;mkdir -m 755 &quot;alias tarxzf=&quot;tar -xzvf&quot;alias tarxjf=&quot;tar -xjvf&quot;alias tarxf=&quot;tar -xvf&quot;alias tarcf=&quot;tar -cf&quot;alias tarczf=&quot;tar -czf&quot;alias tarcjf=&quot;tar -cjf&quot;alias rm=&quot;rm -i&quot;alias grep=&apos;grep --color=auto&apos;LANG=en_US.utf8SYSFONT=&quot;latarcyrheb-sun16&quot;SUPPORTED=&quot;zh_CN.UTF-8:zh_CN:zh&quot;export LANGPS1=&quot;\[\e[1;33m\]\u@\t \[\e[1;36m\]\w\[\e[1;35m\]\nBASH---&gt;\[\e[0;37m\] &quot; #serveralias ipython=&apos;ipython.exe&apos;alias python=&apos;python.exe -i&apos;alias pip=&apos;pip.exe&apos;# another PS1,my WSLPS1=&quot;\[\e[1;36m\]\w\[\e[1;35m\] ---&gt; \[\e[0;37m\]&quot;]]></content>
  </entry>
  <entry>
    <title><![CDATA[python云服务器配置]]></title>
    <url>%2F2019%2F10%2F09%2Fpython%20%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[VScode Remote今天抱着不想上班的心情迎来了高温假后的第一个工作日，吭哧吭哧本地装好了python2 发现没有我需要的包，我还只能在服务器上用那个只有linux和OS的软件。。。 折腾了一波 vscode的remote-ssh，妈蛋服务器端下载又不行 挂上了wget的代理12345$cat ~/.wgetrcuse_proxy=on#check-certificate=offhttp_proxy=http://127.0.0.1:9293https_proxy=http://127.0.0.1:9293 之后，是能下载了，但是centos6的基本库又有问题，我来更新它的权限不是很够，还有gcc的版本要调，由于工程太过浩大，鸽。。。 emmm centos6安装了依赖包之后，蜜汁可以了，非常佛 12345678910111213wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-2.17-55.el6.x86_64.rpmwget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-common-2.17-55.el6.x86_64.rpmwget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-devel-2.17-55.el6.x86_64.rpmwget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-headers-2.17-55.el6.x86_64.rpmwget https://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-utils-2.17-55.el6.x86_64.rpmwget https://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-static-2.17-55.el6.x86_64.rpmwget https://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/gcc-4.8.2-16.3.fc20/libstdc++-4.8.2-16.3.el6.x86_64.rpmwget https://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/gcc-4.8.2-16.3.fc20/libstdc++-devel-4.8.2-16.3.el6.x86_64.rpmwget https://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/gcc-4.8.2-16.3.fc20/libstdc++-static-4.8.2-16.3.el6.x86_64.rpmsudo rpm -Uh --force --nodeps glibc-2.17-55.el6.x86_64.rpm glibc-common-2.17-55.el6.x86_64.rpm glibc-devel-2.17-55.el6.x86_64.rpm glibc-headers-2.17-55.el6.x86_64.rpm glibc-static-2.17-55.el6.x86_64.rpm glibc-utils-2.17-55.el6.x86_64.rpmsudo rpm -Uh libstdc++-4.8.2-16.3.el6.x86_64.rpm libstdc++-devel-4.8.2-16.3.el6.x86_64.rpm libstdc++-static-4.8.2-16.3.el6.x86_64.rpm 然后就可以体验vscode的远程界面了 在服务器上也安装好相关需要的插件vscode remote非常迷，达到了一个ssh终端的效果，我把图片拖上去也能使用，非常棒。。。 jupter notebook 云服务器配置服务器我决定再来折腾一波jupter notebook的云服务器配置，智障的我一开始配的是jupter python3，导致改成python2的jupyter再配置好启动就冒了一串这个玩意： `HTTP request sent; waiting for response.[I 14:21:23.131 NotebookApp] Accepting one-time-token-authenticated connection from ::1 localhost cookie: _xsrf=2|6c33e61b|1db145affcf3b3a4ad8ed3d9c660e009|1564640483 Allow? (Y/N/Always/neVer)`狂按一波delete之后好了。。。emmm，就酱 12345678910111213141516171819202122232425262728$jupyter notebook --generate-configIn [1]: from IPython.lib import passwdIn [2]: passwd()Enter password: Verify password: Out[2]: &apos;sha1:9c54a45da8d5:7097820a8e516d2d2698061e2bc4f843d204936a&apos; $vim ~/.jupyter/jupyter_notebook_config.py c.NotebookApp.ip=&apos;*&apos; #所有绑定服务器的IP都能访问，若想只在特定ip访问，输入ip地址即可c.NotebookApp.notebook_dir = &apos;/NFS/cany/jupyter_projects&apos;c.NotebookApp.password = u&apos;sha1:9c54a45da8d5:7097820a8e516d2d2698061e2bc4f843d204936a&apos;c.NotebookApp.open_browser = False # 代表启动notebook服务时不打开浏览器并访问c.NotebookApp.port =8888 #随便指定一个端口c.IPKernelApp.pylab = &apos;inline&apos;#在服务器端启动jupyter notebookjupyter notebook --no-browser#将远程服务器端口指定到本地ssh -T -L 8888:localhost:8888 TAD#在chrome中输入http://localhost:8888/tree jupyter notebook 拓展https://zhuanlan.zhihu.com/p/36389916 1234pip2 install jupyter_nbextensions_configuratorpip2 install jupyter_contrib_nbextensions jupyter contrib nbextension install --userjupyter nbextensions_configurator enable --user]]></content>
  </entry>
  <entry>
    <title><![CDATA[Jupyter Notebook实现直接调用R]]></title>
    <url>%2F2019%2F10%2F08%2FJupyter%20Notebook%E5%AE%9E%E7%8E%B0%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8R%2F</url>
    <content type="text"><![CDATA[关联jupyter notebook如果你没有安装jupyter notebook，需要先安装。我推荐直接使用anaconda，上面自带jupyter notebook而且环境配置都帮你搞定了，自带python。 相当于最后R和python都可以用 首先我们打开R的命令行，如果不知道可以直接打开Rsudio，在坐下角的console里写如下命令： 12install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))devtools::install_github('IRkernel/IRkernel') 上面的代码会自动分两步执行，执行完后，在输入如下代码中的一个： 1234# 只在当前用户下安装IRkernel::installspec()# 或者是在系统下安装IRkernel::installspec(user = FALSE) 等待执行完毕，打开jupyter就可以新建R的notebook了。 安装rpy2接着 1pip3 install rpy2 就可以了。 开始快活 新建python的notebook，会发现调用R及其简单。 12345678#先新建个Dataframe对象a = pd.DataFrame([[1,2],[2,1]])传到R里:%%R -i aplot(a)从R里传值出来(1000个按正态分布的随机数）：%%R -o qq &lt;- rnorm(1000) Here is the way I fixed my R package version 3.0.2 python version 2.7 platform ipython notebook. Change Path for R computer-&gt; property -&gt; advanced and system setting -&gt; environment variables in the user variable field add C:\Program Files\R\R-3.0.2\bin\x64 (my system is windows 64bit) to path In the system variable field add two new variables 12R_HOME c:\program files\r\r-3.0.2R_USER C:\Users\&quot;your user name&quot;\Anaconda\Lib\site-packages\rpy2 FootNote: https://jonuknownothingsnow.github.io/2018/03/11/%E4%BD%BF%E7%94%A8jupyter%E8%BF%9B%E8%A1%8Cpython%E4%B8%8ER%E5%8D%8F%E5%90%8C/]]></content>
  </entry>
</search>
